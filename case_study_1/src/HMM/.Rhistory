0.05, 0.95),
byrow=T,nrow = 2, ncol = 2)
delta <- c(0.1, 1.0-g) / (1.1-g)
sd <- dof/(dof-2)
mu <- c(-sep*sd/2,sep*sd/2)
sample_data <- function(N,l,mu,dof,delta,Gamma){
X <- rep(1,N)
Y1 <- rt(n=N,df=dof)
Y2 <- rt(n=N,df=dof)
X[1] <- sample(c(1,2), size=1, prob = delta)
Y1[1] <- Y1[1] + mu[X[1]]
Y2[1] <- Y2[1] + mu[X[1]]
for (i in 2:N){
X[i] <- sample(c(1,2), size=1, prob = Gamma[X[i-1],])
Y1[i] <- Y1[i] + mu[X[i]]
Y2[i] <- Y2[i] + mu[X[i]]
}
Z <- rep(NA,N)
inds <- c(sample(which(X == 1),size = l),
sample(which(X == 2),size = l))
Z[inds] <- X[inds]
return(data.frame("X"=X,"Y1"=Y1,"Y2"=Y2,"Z"=Z))
}
train_data <- sample_data(N,l,mu,dof,delta,Gamma)
test_data <- sample_data(N,l,mu,dof,delta,Gamma)
ggpairs(train_data[,c("Y1","Y2")])
#hist(train_data$Y2,breaks=100)
# fit PHMM with multiple values of alpha
Par0 <- list()
Par0[["Y1"]] <- matrix(rep(NA,4), nrow = 2)
Par0[["Y1"]][,1] <- mu
Par0[["Y1"]][,2] <- dof/(dof-2)
Par0[["Y2"]] <- matrix(rep(NA,4), nrow = 2)
Par0[["Y2"]][,1] <- mu
Par0[["Y2"]][,2] <- dof/(dof-2)
hmms <- list()
conf_matrices <- list()
AUCs <- list()
for(lamb in lambs){
lamb_str <- as.character(lamb)
hmms[[lamb_str]] <- fitHMM(data=prepData(train_data,coordNames=NULL),
nbStates=2,
Par0 = Par0,
dist=list("Y1"="norm"),#,"Y2"="norm"),
knownStates=train_data$Z,
lambda=lamb,
retryFits = 0)
# run test data without labels
hmm_pars <- getPar0(hmms[[lamb_str]])
eps <- 1e-8
hmm0 <- fitHMM(data=prepData(test_data,coordNames=NULL),
nbStates=2,
Par0=hmm_pars$Par,
beta0=hmm_pars$beta,
delta0=(1-eps)*(hmm_pars$delta)+eps*rep(1/2,2),
dist=list("Y1"="norm"),#,"Y2"="norm"),
nlmPar = list('stepmax'=1e-100,
'iterlim'=1))
probs0 <- stateProbs(hmm0)
conf_matrices[[lamb_str]] <- matrix(c(0,0,0,0),nrow=2,ncol=2)
for(i in 1:2){
for(j in 1:2){
conf_matrices[[lamb_str]][i,j] = sum(probs0[test_data$X == i,j])
}
}
rownames(conf_matrices[[lamb_str]]) <- c("True 1", "True 2")
colnames(conf_matrices[[lamb_str]]) <- c("Predicted 1", "Predicted 2")
print(conf_matrices[[lamb_str]])
AUCs[[lamb_str]] = roc(response  = test_data$X == 1,
predictor = probs0[,1] ,
direction = "<")$auc
plot_histogram_with_two_densities <- function(data1, data2, bins = 100,
mean1 = NULL, sd1 = NULL,
mean2 = NULL, sd2 = NULL,
w = c(0.5,0.5),
title = paste("$\\alpha =",lamb)){
# Create data frames
df1 <- data.frame(value = data1, group = "X = 1")
df2 <- data.frame(value = data2, group = "X = 2")
df <- rbind(df1, df2)  # Combine both datasets
# Compute means and standard deviations if not provided
if (is.null(mean1)) mean1 <- mean(data1)
if (is.null(sd1)) sd1 <- sd(data1)
if (is.null(mean2)) mean2 <- mean(data2)
if (is.null(sd2)) sd2 <- sd(data2)
# Compute histogram bin counts
hist1 <- hist(data1, breaks = bins, plot = FALSE)
hist2 <- hist(data2, breaks = bins, plot = FALSE)
# Compute normal density scaled to histogram counts
x_vals <- seq(min(c(data1, data2)), max(c(data1, data2)), length.out = 100)
density_data1 <- data.frame(
x = x_vals,
y = dnorm(x_vals, mean = mean1, sd = sd1) * diff(hist1$breaks)[1]*w[1]*N,
group = "X = 1"
)
density_data2 <- data.frame(
x = x_vals,
y = dnorm(x_vals, mean = mean2, sd = sd2) * diff(hist2$breaks)[1]*w[2]*N,
group = "X = 2"
)
density_data <- rbind(density_data1, density_data2)
# Plot the histograms and density functions
p <- ggplot(df, aes(x = value, fill = group)) +
geom_histogram(bins = bins, color = "black", alpha = 0.4, position = "identity") +
geom_line(data = density_data, aes(x = x, y = y, color = group), size = 1) +  # Theoretical normal densities
labs(title = TeX(title), x = "Value", y = "Count", fill = "Dataset", color = "Dataset") +
theme_minimal()
# Print the plot
print(p)
}
hmm <- hmms[[lamb_str]]
weights = c(hmm$mle$gamma[2,1],hmm$mle$gamma[1,2]) / (hmm$mle$gamma[2,1] + hmm$mle$gamma[1,2])
plot_histogram_with_two_densities(test_data$Y1[test_data$X == 1],
test_data$Y1[test_data$X == 2],
mean1 = hmm$mle$Y1["mean",1], sd1 = hmm$mle$Y1["sd",1],
mean2 = hmm$mle$Y1["mean",2], sd2 = hmm$mle$Y1["sd",2],
w = weights)
}
print(AUCs)
library(momentuHMM)
library(ggplot2)
library(latex2exp)
library(pROC)
dof <- 4 # 2.5, 4, 100
sep <- 0.5 # 0.25, 0.75, 2
g <- 0.99 # 0.95, 0.99, 0.999
l <- 10 # 2, 10, 50 labels per class
N <- 2000 # 200, 2000, 20000
lambs <- c(0.0,0.005,0.01,0.05,0.1,0.5,1.0)
# sample data
Gamma <- matrix(c(g, 1.0-g,
0.05, 0.95),
byrow=T,nrow = 2, ncol = 2)
delta <- c(0.1, 1.0-g) / (1.1-g)
sd <- dof/(dof-2)
mu <- c(-sep*sd/2,sep*sd/2)
sample_data <- function(N,l,mu,dof,delta,Gamma){
X <- rep(1,N)
Y1 <- rt(n=N,df=dof)
Y2 <- rt(n=N,df=dof)
X[1] <- sample(c(1,2), size=1, prob = delta)
Y1[1] <- Y1[1] + mu[X[1]]
Y2[1] <- Y2[1] + mu[X[1]]
for (i in 2:N){
X[i] <- sample(c(1,2), size=1, prob = Gamma[X[i-1],])
Y1[i] <- Y1[i] + mu[X[i]]
Y2[i] <- Y2[i] + mu[X[i]]
}
Z <- rep(NA,N)
inds <- c(sample(which(X == 1),size = l),
sample(which(X == 2),size = l))
Z[inds] <- X[inds]
return(data.frame("X"=X,"Y1"=Y1,"Y2"=Y2,"Z"=Z))
}
train_data <- sample_data(N,l,mu,dof,delta,Gamma)
test_data <- sample_data(N,l,mu,dof,delta,Gamma)
ggpairs(train_data[,c("Y1","Y2")])
#hist(train_data$Y2,breaks=100)
# fit PHMM with multiple values of alpha
Par0 <- list()
Par0[["Y1"]] <- matrix(rep(NA,4), nrow = 2)
Par0[["Y1"]][,1] <- mu
Par0[["Y1"]][,2] <- dof/(dof-2)
Par0[["Y2"]] <- matrix(rep(NA,4), nrow = 2)
Par0[["Y2"]][,1] <- mu
Par0[["Y2"]][,2] <- dof/(dof-2)
hmms <- list()
conf_matrices <- list()
AUCs <- list()
for(lamb in lambs){
lamb_str <- as.character(lamb)
hmms[[lamb_str]] <- fitHMM(data=prepData(train_data,coordNames=NULL),
nbStates=2,
Par0 = Par0,
dist=list("Y1"="norm"),#,"Y2"="norm"),
knownStates=train_data$Z,
lambda=lamb,
retryFits = 0)
# run test data without labels
hmm_pars <- getPar0(hmms[[lamb_str]])
eps <- 1e-8
hmm0 <- fitHMM(data=prepData(test_data,coordNames=NULL),
nbStates=2,
Par0=hmm_pars$Par,
beta0=hmm_pars$beta,
delta0=(1-eps)*(hmm_pars$delta)+eps*rep(1/2,2),
dist=list("Y1"="norm"),#,"Y2"="norm"),
nlmPar = list('stepmax'=1e-100,
'iterlim'=1))
probs0 <- stateProbs(hmm0)
conf_matrices[[lamb_str]] <- matrix(c(0,0,0,0),nrow=2,ncol=2)
for(i in 1:2){
for(j in 1:2){
conf_matrices[[lamb_str]][i,j] = sum(probs0[test_data$X == i,j])
}
}
rownames(conf_matrices[[lamb_str]]) <- c("True 1", "True 2")
colnames(conf_matrices[[lamb_str]]) <- c("Predicted 1", "Predicted 2")
print(conf_matrices[[lamb_str]])
AUCs[[lamb_str]] = roc(response  = test_data$X == 1,
predictor = probs0[,1] ,
direction = "<")$auc
plot_histogram_with_two_densities <- function(data1, data2, bins = 100,
mean1 = NULL, sd1 = NULL,
mean2 = NULL, sd2 = NULL,
w = c(0.5,0.5),
title = paste("$\\alpha =",lamb)){
# Create data frames
df1 <- data.frame(value = data1, group = "X = 1")
df2 <- data.frame(value = data2, group = "X = 2")
df <- rbind(df1, df2)  # Combine both datasets
# Compute means and standard deviations if not provided
if (is.null(mean1)) mean1 <- mean(data1)
if (is.null(sd1)) sd1 <- sd(data1)
if (is.null(mean2)) mean2 <- mean(data2)
if (is.null(sd2)) sd2 <- sd(data2)
# Compute histogram bin counts
hist1 <- hist(data1, breaks = bins, plot = FALSE)
hist2 <- hist(data2, breaks = bins, plot = FALSE)
# Compute normal density scaled to histogram counts
x_vals <- seq(min(c(data1, data2)), max(c(data1, data2)), length.out = 100)
density_data1 <- data.frame(
x = x_vals,
y = dnorm(x_vals, mean = mean1, sd = sd1) * diff(hist1$breaks)[1]*w[1]*N,
group = "X = 1"
)
density_data2 <- data.frame(
x = x_vals,
y = dnorm(x_vals, mean = mean2, sd = sd2) * diff(hist2$breaks)[1]*w[2]*N,
group = "X = 2"
)
density_data <- rbind(density_data1, density_data2)
# Plot the histograms and density functions
p <- ggplot(df, aes(x = value, fill = group)) +
geom_histogram(bins = bins, color = "black", alpha = 0.4, position = "identity") +
geom_line(data = density_data, aes(x = x, y = y, color = group), size = 1) +  # Theoretical normal densities
labs(title = TeX(title), x = "Value", y = "Count", fill = "Dataset", color = "Dataset") +
theme_minimal()
# Print the plot
print(p)
}
hmm <- hmms[[lamb_str]]
weights = c(hmm$mle$gamma[2,1],hmm$mle$gamma[1,2]) / (hmm$mle$gamma[2,1] + hmm$mle$gamma[1,2])
plot_histogram_with_two_densities(test_data$Y1[test_data$X == 1],
test_data$Y1[test_data$X == 2],
mean1 = hmm$mle$Y1["mean",1], sd1 = hmm$mle$Y1["sd",1],
mean2 = hmm$mle$Y1["mean",2], sd2 = hmm$mle$Y1["sd",2],
w = weights)
}
print(AUCs)
library(momentuHMM)
library(ggplot2)
library(latex2exp)
library(pROC)
dof <- 4 # 2.5, 4, 100
sep <- 0.5 # 0.25, 0.75, 2
g <- 0.99 # 0.95, 0.99, 0.999
l <- 10 # 2, 10, 50 labels per class
N <- 2000 # 200, 2000, 20000
lambs <- c(0.0,0.005,0.01,0.05,0.1,0.5,1.0)
# sample data
Gamma <- matrix(c(g, 1.0-g,
0.05, 0.95),
byrow=T,nrow = 2, ncol = 2)
delta <- c(0.1, 1.0-g) / (1.1-g)
sd <- dof/(dof-2)
mu <- c(-sep*sd/2,sep*sd/2)
sample_data <- function(N,l,mu,dof,delta,Gamma){
X <- rep(1,N)
Y1 <- rt(n=N,df=dof)
Y2 <- rt(n=N,df=dof)
X[1] <- sample(c(1,2), size=1, prob = delta)
Y1[1] <- Y1[1] + mu[X[1]]
Y2[1] <- Y2[1] + mu[X[1]]
for (i in 2:N){
X[i] <- sample(c(1,2), size=1, prob = Gamma[X[i-1],])
Y1[i] <- Y1[i] + mu[X[i]]
Y2[i] <- Y2[i] + mu[X[i]]
}
Z <- rep(NA,N)
inds <- c(sample(which(X == 1),size = l),
sample(which(X == 2),size = l))
Z[inds] <- X[inds]
return(data.frame("X"=X,"Y1"=Y1,"Y2"=Y2,"Z"=Z))
}
train_data <- sample_data(N,l,mu,dof,delta,Gamma)
test_data <- sample_data(N,l,mu,dof,delta,Gamma)
ggpairs(train_data[,c("Y1","Y2")])
#hist(train_data$Y2,breaks=100)
# fit PHMM with multiple values of alpha
Par0 <- list()
Par0[["Y1"]] <- matrix(rep(NA,4), nrow = 2)
Par0[["Y1"]][,1] <- mu
Par0[["Y1"]][,2] <- dof/(dof-2)
Par0[["Y2"]] <- matrix(rep(NA,4), nrow = 2)
Par0[["Y2"]][,1] <- mu
Par0[["Y2"]][,2] <- dof/(dof-2)
hmms <- list()
conf_matrices <- list()
AUCs <- list()
for(lamb in lambs){
lamb_str <- as.character(lamb)
hmms[[lamb_str]] <- fitHMM(data=prepData(train_data,coordNames=NULL),
nbStates=2,
Par0 = Par0,
dist=list("Y1"="norm"),#,"Y2"="norm"),
knownStates=train_data$Z,
lambda=lamb,
retryFits = 0)
# run test data without labels
hmm_pars <- getPar0(hmms[[lamb_str]])
eps <- 1e-8
hmm0 <- fitHMM(data=prepData(test_data,coordNames=NULL),
nbStates=2,
Par0=hmm_pars$Par,
beta0=hmm_pars$beta,
delta0=(1-eps)*(hmm_pars$delta)+eps*rep(1/2,2),
dist=list("Y1"="norm"),#,"Y2"="norm"),
nlmPar = list('stepmax'=1e-100,
'iterlim'=1))
probs0 <- stateProbs(hmm0)
conf_matrices[[lamb_str]] <- matrix(c(0,0,0,0),nrow=2,ncol=2)
for(i in 1:2){
for(j in 1:2){
conf_matrices[[lamb_str]][i,j] = sum(probs0[test_data$X == i,j])
}
}
rownames(conf_matrices[[lamb_str]]) <- c("True 1", "True 2")
colnames(conf_matrices[[lamb_str]]) <- c("Predicted 1", "Predicted 2")
print(conf_matrices[[lamb_str]])
AUCs[[lamb_str]] = roc(response  = test_data$X == 1,
predictor = probs0[,1] ,
direction = "<")$auc
plot_histogram_with_two_densities <- function(data1, data2, bins = 100,
mean1 = NULL, sd1 = NULL,
mean2 = NULL, sd2 = NULL,
w = c(0.5,0.5),
title = paste("$\\alpha =",lamb)){
# Create data frames
df1 <- data.frame(value = data1, group = "X = 1")
df2 <- data.frame(value = data2, group = "X = 2")
df <- rbind(df1, df2)  # Combine both datasets
# Compute means and standard deviations if not provided
if (is.null(mean1)) mean1 <- mean(data1)
if (is.null(sd1)) sd1 <- sd(data1)
if (is.null(mean2)) mean2 <- mean(data2)
if (is.null(sd2)) sd2 <- sd(data2)
# Compute histogram bin counts
hist1 <- hist(data1, breaks = bins, plot = FALSE)
hist2 <- hist(data2, breaks = bins, plot = FALSE)
# Compute normal density scaled to histogram counts
x_vals <- seq(min(c(data1, data2)), max(c(data1, data2)), length.out = 100)
density_data1 <- data.frame(
x = x_vals,
y = dnorm(x_vals, mean = mean1, sd = sd1) * diff(hist1$breaks)[1]*w[1]*N,
group = "X = 1"
)
density_data2 <- data.frame(
x = x_vals,
y = dnorm(x_vals, mean = mean2, sd = sd2) * diff(hist2$breaks)[1]*w[2]*N,
group = "X = 2"
)
density_data <- rbind(density_data1, density_data2)
# Plot the histograms and density functions
p <- ggplot(df, aes(x = value, fill = group)) +
geom_histogram(bins = bins, color = "black", alpha = 0.4, position = "identity") +
geom_line(data = density_data, aes(x = x, y = y, color = group), size = 1) +  # Theoretical normal densities
labs(title = TeX(title), x = "Value", y = "Count", fill = "Dataset", color = "Dataset") +
theme_minimal()
# Print the plot
print(p)
}
hmm <- hmms[[lamb_str]]
weights = c(hmm$mle$gamma[2,1],hmm$mle$gamma[1,2]) / (hmm$mle$gamma[2,1] + hmm$mle$gamma[1,2])
plot_histogram_with_two_densities(test_data$Y1[test_data$X == 1],
test_data$Y1[test_data$X == 2],
mean1 = hmm$mle$Y1["mean",1], sd1 = hmm$mle$Y1["sd",1],
mean2 = hmm$mle$Y1["mean",2], sd2 = hmm$mle$Y1["sd",2],
w = weights)
}
print(AUCs)
library(momentuHMM)
library(ggplot2)
library(latex2exp)
library(pROC)
dof <- 4 # 2.5, 4, 100
sep <- 0.25 # 0.25, 0.75, 2
g <- 0.99 # 0.95, 0.99, 0.999
l <- 10 # 2, 10, 50 labels per class
N <- 2000 # 200, 2000, 20000
lambs <- c(0.0,0.005,0.01,0.05,0.1,0.5,1.0)
# sample data
Gamma <- matrix(c(g, 1.0-g,
0.05, 0.95),
byrow=T,nrow = 2, ncol = 2)
delta <- c(0.1, 1.0-g) / (1.1-g)
sd <- dof/(dof-2)
mu <- c(-sep*sd/2,sep*sd/2)
sample_data <- function(N,l,mu,dof,delta,Gamma){
X <- rep(1,N)
Y1 <- rt(n=N,df=dof)
Y2 <- rt(n=N,df=dof)
X[1] <- sample(c(1,2), size=1, prob = delta)
Y1[1] <- Y1[1] + mu[X[1]]
Y2[1] <- Y2[1] + mu[X[1]]
for (i in 2:N){
X[i] <- sample(c(1,2), size=1, prob = Gamma[X[i-1],])
Y1[i] <- Y1[i] + mu[X[i]]
Y2[i] <- Y2[i] + mu[X[i]]
}
Z <- rep(NA,N)
inds <- c(sample(which(X == 1),size = l),
sample(which(X == 2),size = l))
Z[inds] <- X[inds]
return(data.frame("X"=X,"Y1"=Y1,"Y2"=Y2,"Z"=Z))
}
train_data <- sample_data(N,l,mu,dof,delta,Gamma)
test_data <- sample_data(N,l,mu,dof,delta,Gamma)
ggpairs(train_data[,c("Y1","Y2")])
#hist(train_data$Y2,breaks=100)
# fit PHMM with multiple values of alpha
Par0 <- list()
Par0[["Y1"]] <- matrix(rep(NA,4), nrow = 2)
Par0[["Y1"]][,1] <- mu
Par0[["Y1"]][,2] <- dof/(dof-2)
Par0[["Y2"]] <- matrix(rep(NA,4), nrow = 2)
Par0[["Y2"]][,1] <- mu
Par0[["Y2"]][,2] <- dof/(dof-2)
hmms <- list()
conf_matrices <- list()
AUCs <- list()
for(lamb in lambs){
lamb_str <- as.character(lamb)
hmms[[lamb_str]] <- fitHMM(data=prepData(train_data,coordNames=NULL),
nbStates=2,
Par0 = Par0,
dist=list("Y1"="norm"),#,"Y2"="norm"),
knownStates=train_data$Z,
lambda=lamb,
retryFits = 0)
# run test data without labels
hmm_pars <- getPar0(hmms[[lamb_str]])
eps <- 1e-8
hmm0 <- fitHMM(data=prepData(test_data,coordNames=NULL),
nbStates=2,
Par0=hmm_pars$Par,
beta0=hmm_pars$beta,
delta0=(1-eps)*(hmm_pars$delta)+eps*rep(1/2,2),
dist=list("Y1"="norm"),#,"Y2"="norm"),
nlmPar = list('stepmax'=1e-100,
'iterlim'=1))
probs0 <- stateProbs(hmm0)
conf_matrices[[lamb_str]] <- matrix(c(0,0,0,0),nrow=2,ncol=2)
for(i in 1:2){
for(j in 1:2){
conf_matrices[[lamb_str]][i,j] = sum(probs0[test_data$X == i,j])
}
}
rownames(conf_matrices[[lamb_str]]) <- c("True 1", "True 2")
colnames(conf_matrices[[lamb_str]]) <- c("Predicted 1", "Predicted 2")
print(conf_matrices[[lamb_str]])
AUCs[[lamb_str]] = roc(response  = test_data$X == 1,
predictor = probs0[,1] ,
direction = "<")$auc
plot_histogram_with_two_densities <- function(data1, data2, bins = 100,
mean1 = NULL, sd1 = NULL,
mean2 = NULL, sd2 = NULL,
w = c(0.5,0.5),
title = paste("$\\alpha =",lamb)){
# Create data frames
df1 <- data.frame(value = data1, group = "X = 1")
df2 <- data.frame(value = data2, group = "X = 2")
df <- rbind(df1, df2)  # Combine both datasets
# Compute means and standard deviations if not provided
if (is.null(mean1)) mean1 <- mean(data1)
if (is.null(sd1)) sd1 <- sd(data1)
if (is.null(mean2)) mean2 <- mean(data2)
if (is.null(sd2)) sd2 <- sd(data2)
# Compute histogram bin counts
hist1 <- hist(data1, breaks = bins, plot = FALSE)
hist2 <- hist(data2, breaks = bins, plot = FALSE)
# Compute normal density scaled to histogram counts
x_vals <- seq(min(c(data1, data2)), max(c(data1, data2)), length.out = 100)
density_data1 <- data.frame(
x = x_vals,
y = dnorm(x_vals, mean = mean1, sd = sd1) * diff(hist1$breaks)[1]*w[1]*N,
group = "X = 1"
)
density_data2 <- data.frame(
x = x_vals,
y = dnorm(x_vals, mean = mean2, sd = sd2) * diff(hist2$breaks)[1]*w[2]*N,
group = "X = 2"
)
density_data <- rbind(density_data1, density_data2)
# Plot the histograms and density functions
p <- ggplot(df, aes(x = value, fill = group)) +
geom_histogram(bins = bins, color = "black", alpha = 0.4, position = "identity") +
geom_line(data = density_data, aes(x = x, y = y, color = group), size = 1) +  # Theoretical normal densities
labs(title = TeX(title), x = "Value", y = "Count", fill = "Dataset", color = "Dataset") +
theme_minimal()
# Print the plot
print(p)
}
hmm <- hmms[[lamb_str]]
weights = c(hmm$mle$gamma[2,1],hmm$mle$gamma[1,2]) / (hmm$mle$gamma[2,1] + hmm$mle$gamma[1,2])
plot_histogram_with_two_densities(test_data$Y1[test_data$X == 1],
test_data$Y1[test_data$X == 2],
mean1 = hmm$mle$Y1["mean",1], sd1 = hmm$mle$Y1["sd",1],
mean2 = hmm$mle$Y1["mean",2], sd2 = hmm$mle$Y1["sd",2],
w = weights)
}
print(AUCs)

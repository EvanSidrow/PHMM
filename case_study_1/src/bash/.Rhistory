title <- paste0(title,"-",nstates)
}
for(feature in features1){
title <- paste0(title,"-",feature)
}
if(length(sex) > 1){
title <- paste0(title,"_all")
} else {
title <- paste0(title,"_",sex)
}
title <- paste0(title,"_",end)
return(title)
}
file <- make_title(paste0(directory,"/params/"),
paste0(model,"-",
lamb,"-",
holdout_whale,"-",
rand_seed,"-",
"hmm.rds"))
# get data and remove heldout whale
Data <- data.frame(fread("../../dat/case_study_1_data.csv"))
Data <- Data[!(Data$ID %in% holdout_whale),]
# define states
bhavs <- c("rest","trav","forg")
behaviours <- c("resting","travelling","foraging")
inds <- c(0,cumsum(statesPerBehaviour))
b_inds <- list()
b_inds$resting <- (inds[1]+1):inds[2]
b_inds$travelling <- (inds[2]+1):inds[3]
b_inds$foraging <- (inds[3]+1):inds[4]
# set up label distribution
dist$label <- NULL
if(model != "no"){
dist$label = paste0("cat",nlevels(Data$label))
}
# set up DM matrix
DM <- list()
if (model %in% c("fixed")){
labelDM <- c()
for(b in 1:3){
for(i in 1:N){
if(i %in% b_inds[[behaviours[b]]]){
labelDM <- c(labelDM, c(1,0))
} else {
labelDM <- c(labelDM, c(0,1))
}
}
}
labelDM <- matrix(labelDM,3*N,2,byrow = TRUE)
DM$label <- labelDM
}
for(feature in features1){
if(dist[[feature]] == "mvnorm2"){
DM0 <- diag(5*N)
for(i in 1:N){
DM0[3*N+i,2*N+i] <- 0.5
DM0[3*N+i,4*N+i] <- 0.5
}
DM[[feature]] <- DM0
} else if (dist[[feature]] == "norm"){
DM[[feature]] <- list(mean = ~1, sd = ~1)
} else if (substring(dist[[feature]], 1,3) == "cat"){
ncats <- as.integer(substring(dist[[feature]], 4))
DM[[feature]] <- list()
for(i in 1:(ncats-1)){
DM[[feature]][[paste0("prob",i)]] = ~1
}
}
}
# Set fixed Parameters
fixPar <- list()
if(model %in% c("fixed")){
fixPar$label <- c(0,-100)
}
# Set initial Parameters
Par0 <- list()
for(feature in features1){
if(dist[[feature]] == "norm"){
Par0[[feature]] <- matrix(rep(NA,2*N), nrow = N)
Par0[[feature]][,1] <- mean(Data[,feature]) + 0.1*rnorm(N)*sd(Data[,feature]) # mean
Par0[[feature]][,2] <- exp(0.1*rnorm(N))/sqrt(N) * sd(Data[,feature])           # sd
} else if (dist[[feature]] == "mvnorm2") {
Par0[[feature]] <- matrix(rep(NA,5*N), nrow = N)
featurex <- paste0(feature,".x")
featurey <- paste0(feature,".y")
Par0[[feature]][,1] <- mean(Data[,featurex]) + 0.1*rnorm(N)*sd(Data[,featurex]) # mean
Par0[[feature]][,2] <- mean(Data[,featurey]) + 0.1*rnorm(N)*sd(Data[,featurey]) # mean
Par0[[feature]][,3] <- 0.1*rnorm(N) + log(sd(Data[,featurex])) - 0.1*log(N) # sd x
Par0[[feature]][,4] <- 0.0                                                  # cov xy
Par0[[feature]][,5] <- 0.1*rnorm(N) + log(sd(Data[,featurey])) - 0.1*log(N) # sd y
} else if (substring(dist[[feature]], 1,3) == "cat") {
ncats <- as.integer(substring(dist[[feature]], 4))
Par0[[feature]] <- matrix(rep(NA,(ncats-1)*N), nrow = N)
for(j in 1:(ncats-1)){
Par0[[feature]][,j] <- mean(Data[,feature] == j , na.rm=T)
}
noise <- matrix(rexp(ncats*N), nrow = N)
noise <- noise / rowSums(noise)
Par0[[feature]] = 0.9*Par0[[feature]] + 0.1*noise[,-1]
}
}
# get accuracy of mixture model for each behaviour and state
accs <- matrix(rep(0,N^2),nrow=N,ncol=N)
for(i in 1:N){
# get data associated with the behaviour in question
behaviour_ind <- which(i <= cumsum(statesPerBehaviour))[1]
behaviour_data <- Data[Data$knownState %in% behaviour_ind,]
# get p(X,Y)
pXY <- matrix(rep(0,N*nrow(behaviour_data)),
nrow=nrow(behaviour_data),ncol=N)
for(j in 1:N){
for(feature in features1){
if(dist[[feature]] == "norm"){
pXY[,j] <- pXY[,j] + dnorm(behaviour_data[,feature],
mean=Par0[[feature]][j,1],
sd=exp(Par0[[feature]][j,2]) + 0.01)
} else if (dist[[feature]] == "mvnorm2") {
featurex <- paste0(feature,".x")
featurey <- paste0(feature,".y")
meanx <- Par0[[feature]][j,1]
meany <- Par0[[feature]][j,2]
sigxx <- exp(Par0[[feature]][j,3]) + 0.01
sigyy <- exp(Par0[[feature]][j,5]) + 0.01
sigxy <- exp(0.5*Par0[[feature]][j,3] +
0.5*Par0[[feature]][j,5] +
-exp(-Par0[[feature]][j,4]))
pXY[,j] <- pXY[,j] + dmvnorm(behaviour_data[,c(featurex,featurey)],
mean=c(meanx,meany),
sigma=matrix(c(sigxx,sigxy,sigxy,sigyy),nrow=2))
} else if (substring(dist[[feature]], 1,3) == "cat") {
probs <- Par0[[feature]][j,]
probs <- c(probs,1.0-sum(probs))
pXY[,j] <- pXY[,j] + probs[behaviour_data[,feature]]
}
}
}
# get p(X|Y) and add to accuracies
p_X_given_Y <- pXY / rowSums(pXY)
accs[i,] <- colSums(p_X_given_Y) / nrow(behaviour_data)
}
hs <- HungarianSolver(-accs)
pairs <- hs$pairs
for(feature in features1){
Par0[[feature]] <- Par0[[feature]][pairs[,2],]
}
m_prob <- 0.001
if (model %in% c("fixed")){
Par0$label = fixPar$label
} else if (model == "random") {
Par0$label <- c(3*mean(Data[,"label"] == 1, na.rm=T), m_prob, m_prob,
m_prob, 3*mean(Data[,"label"] == 2, na.rm=T), m_prob,
m_prob, m_prob, 3*mean(Data[,"label"] == 3, na.rm=T))
}
# Set initial gamma and delta
beta0 <- matrix(rnorm(N*(N-1),mean=-2,sd=1),nrow=1)
delta0 <- matrix(rep(1/N,N),nrow=1)
# prep data
Data0 <- prepData(Data,coordNames=NULL)
eps <- 1e-8
# define the known states
knownStates <- Data$knownState
knownStates[knownStates == 4] <- NA
if (model %in% c("no","random")){
knownStates <- rep(NA,length(knownStates))
}
# fit HMM
hmm <- fitHMM(data=Data0,
nbStates=N,
dist=dist,
DM=DM,
beta0=beta0,
delta0=(1-eps)*delta0 + eps*rep(1/N,N),
Par0=Par0,
fixPar=fixPar,
knownStates=knownStates,
lambda=lamb,
userBounds=userBounds,
workBounds=workBounds,
nlmPar = list('iterlim'=iterlim,
'print.level'=0))
Data0
dist
Data$label
nlevels(Data$label)
nunique(Data$label)
unique(Data$label)
# set up label distribution
dist$label <- NULL
if(model != "no"){
dist$label = paste0("cat",nlevels(Data$label))
Data$label <- factor(Data$knownState, levels = 1:4)
}
# set up DM matrix
DM <- list()
if (model %in% c("fixed")){
labelDM <- c()
for(b in 1:3){
for(i in 1:N){
if(i %in% b_inds[[behaviours[b]]]){
labelDM <- c(labelDM, c(1,0))
} else {
labelDM <- c(labelDM, c(0,1))
}
}
}
labelDM <- matrix(labelDM,3*N,2,byrow = TRUE)
DM$label <- labelDM
}
for(feature in features1){
if(dist[[feature]] == "mvnorm2"){
DM0 <- diag(5*N)
for(i in 1:N){
DM0[3*N+i,2*N+i] <- 0.5
DM0[3*N+i,4*N+i] <- 0.5
}
DM[[feature]] <- DM0
} else if (dist[[feature]] == "norm"){
DM[[feature]] <- list(mean = ~1, sd = ~1)
} else if (substring(dist[[feature]], 1,3) == "cat"){
ncats <- as.integer(substring(dist[[feature]], 4))
DM[[feature]] <- list()
for(i in 1:(ncats-1)){
DM[[feature]][[paste0("prob",i)]] = ~1
}
}
}
# Set fixed Parameters
fixPar <- list()
if(model %in% c("fixed")){
fixPar$label <- c(0,-100)
}
# Set initial Parameters
Par0 <- list()
for(feature in features1){
if(dist[[feature]] == "norm"){
Par0[[feature]] <- matrix(rep(NA,2*N), nrow = N)
Par0[[feature]][,1] <- mean(Data[,feature]) + 0.1*rnorm(N)*sd(Data[,feature]) # mean
Par0[[feature]][,2] <- exp(0.1*rnorm(N))/sqrt(N) * sd(Data[,feature])           # sd
} else if (dist[[feature]] == "mvnorm2") {
Par0[[feature]] <- matrix(rep(NA,5*N), nrow = N)
featurex <- paste0(feature,".x")
featurey <- paste0(feature,".y")
Par0[[feature]][,1] <- mean(Data[,featurex]) + 0.1*rnorm(N)*sd(Data[,featurex]) # mean
Par0[[feature]][,2] <- mean(Data[,featurey]) + 0.1*rnorm(N)*sd(Data[,featurey]) # mean
Par0[[feature]][,3] <- 0.1*rnorm(N) + log(sd(Data[,featurex])) - 0.1*log(N) # sd x
Par0[[feature]][,4] <- 0.0                                                  # cov xy
Par0[[feature]][,5] <- 0.1*rnorm(N) + log(sd(Data[,featurey])) - 0.1*log(N) # sd y
} else if (substring(dist[[feature]], 1,3) == "cat") {
ncats <- as.integer(substring(dist[[feature]], 4))
Par0[[feature]] <- matrix(rep(NA,(ncats-1)*N), nrow = N)
for(j in 1:(ncats-1)){
Par0[[feature]][,j] <- mean(Data[,feature] == j , na.rm=T)
}
noise <- matrix(rexp(ncats*N), nrow = N)
noise <- noise / rowSums(noise)
Par0[[feature]] = 0.9*Par0[[feature]] + 0.1*noise[,-1]
}
}
# get accuracy of mixture model for each behaviour and state
accs <- matrix(rep(0,N^2),nrow=N,ncol=N)
for(i in 1:N){
# get data associated with the behaviour in question
behaviour_ind <- which(i <= cumsum(statesPerBehaviour))[1]
behaviour_data <- Data[Data$knownState %in% behaviour_ind,]
# get p(X,Y)
pXY <- matrix(rep(0,N*nrow(behaviour_data)),
nrow=nrow(behaviour_data),ncol=N)
for(j in 1:N){
for(feature in features1){
if(dist[[feature]] == "norm"){
pXY[,j] <- pXY[,j] + dnorm(behaviour_data[,feature],
mean=Par0[[feature]][j,1],
sd=exp(Par0[[feature]][j,2]) + 0.01)
} else if (dist[[feature]] == "mvnorm2") {
featurex <- paste0(feature,".x")
featurey <- paste0(feature,".y")
meanx <- Par0[[feature]][j,1]
meany <- Par0[[feature]][j,2]
sigxx <- exp(Par0[[feature]][j,3]) + 0.01
sigyy <- exp(Par0[[feature]][j,5]) + 0.01
sigxy <- exp(0.5*Par0[[feature]][j,3] +
0.5*Par0[[feature]][j,5] +
-exp(-Par0[[feature]][j,4]))
pXY[,j] <- pXY[,j] + dmvnorm(behaviour_data[,c(featurex,featurey)],
mean=c(meanx,meany),
sigma=matrix(c(sigxx,sigxy,sigxy,sigyy),nrow=2))
} else if (substring(dist[[feature]], 1,3) == "cat") {
probs <- Par0[[feature]][j,]
probs <- c(probs,1.0-sum(probs))
pXY[,j] <- pXY[,j] + probs[behaviour_data[,feature]]
}
}
}
# get p(X|Y) and add to accuracies
p_X_given_Y <- pXY / rowSums(pXY)
accs[i,] <- colSums(p_X_given_Y) / nrow(behaviour_data)
}
hs <- HungarianSolver(-accs)
pairs <- hs$pairs
for(feature in features1){
Par0[[feature]] <- Par0[[feature]][pairs[,2],]
}
m_prob <- 0.001
if (model %in% c("fixed")){
Par0$label = fixPar$label
} else if (model == "random") {
Par0$label <- c(3*mean(Data[,"label"] == 1, na.rm=T), m_prob, m_prob,
m_prob, 3*mean(Data[,"label"] == 2, na.rm=T), m_prob,
m_prob, m_prob, 3*mean(Data[,"label"] == 3, na.rm=T))
}
# Set initial gamma and delta
beta0 <- matrix(rnorm(N*(N-1),mean=-2,sd=1),nrow=1)
delta0 <- matrix(rep(1/N,N),nrow=1)
# prep data
Data0 <- prepData(Data,coordNames=NULL)
eps <- 1e-8
# define the known states
knownStates <- Data$knownState
knownStates[knownStates == 4] <- NA
if (model %in% c("no","random")){
knownStates <- rep(NA,length(knownStates))
}
# fit HMM
hmm <- fitHMM(data=Data0,
nbStates=N,
dist=dist,
DM=DM,
beta0=beta0,
delta0=(1-eps)*delta0 + eps*rep(1/N,N),
Par0=Par0,
fixPar=fixPar,
knownStates=knownStates,
lambda=lamb,
userBounds=userBounds,
workBounds=workBounds,
nlmPar = list('iterlim'=iterlim,
'print.level'=0))
# find the best pairings and refit the model
probs <- stateProbs(hmm)
dist
# set up label distribution
dist$label <- NULL
if(model != "no"){
Data$label <- factor(Data$knownState, levels = 1:4)
dist$label = paste0("cat",nlevels(Data$label))
}
# set up DM matrix
DM <- list()
if (model %in% c("fixed")){
labelDM <- c()
for(b in 1:3){
for(i in 1:N){
if(i %in% b_inds[[behaviours[b]]]){
labelDM <- c(labelDM, c(1,0))
} else {
labelDM <- c(labelDM, c(0,1))
}
}
}
labelDM <- matrix(labelDM,3*N,2,byrow = TRUE)
DM$label <- labelDM
}
for(feature in features1){
if(dist[[feature]] == "mvnorm2"){
DM0 <- diag(5*N)
for(i in 1:N){
DM0[3*N+i,2*N+i] <- 0.5
DM0[3*N+i,4*N+i] <- 0.5
}
DM[[feature]] <- DM0
} else if (dist[[feature]] == "norm"){
DM[[feature]] <- list(mean = ~1, sd = ~1)
} else if (substring(dist[[feature]], 1,3) == "cat"){
ncats <- as.integer(substring(dist[[feature]], 4))
DM[[feature]] <- list()
for(i in 1:(ncats-1)){
DM[[feature]][[paste0("prob",i)]] = ~1
}
}
}
# Set fixed Parameters
fixPar <- list()
if(model %in% c("fixed")){
fixPar$label <- c(0,-100)
}
# Set initial Parameters
Par0 <- list()
for(feature in features1){
if(dist[[feature]] == "norm"){
Par0[[feature]] <- matrix(rep(NA,2*N), nrow = N)
Par0[[feature]][,1] <- mean(Data[,feature]) + 0.1*rnorm(N)*sd(Data[,feature]) # mean
Par0[[feature]][,2] <- exp(0.1*rnorm(N))/sqrt(N) * sd(Data[,feature])           # sd
} else if (dist[[feature]] == "mvnorm2") {
Par0[[feature]] <- matrix(rep(NA,5*N), nrow = N)
featurex <- paste0(feature,".x")
featurey <- paste0(feature,".y")
Par0[[feature]][,1] <- mean(Data[,featurex]) + 0.1*rnorm(N)*sd(Data[,featurex]) # mean
Par0[[feature]][,2] <- mean(Data[,featurey]) + 0.1*rnorm(N)*sd(Data[,featurey]) # mean
Par0[[feature]][,3] <- 0.1*rnorm(N) + log(sd(Data[,featurex])) - 0.1*log(N) # sd x
Par0[[feature]][,4] <- 0.0                                                  # cov xy
Par0[[feature]][,5] <- 0.1*rnorm(N) + log(sd(Data[,featurey])) - 0.1*log(N) # sd y
} else if (substring(dist[[feature]], 1,3) == "cat") {
ncats <- as.integer(substring(dist[[feature]], 4))
Par0[[feature]] <- matrix(rep(NA,(ncats-1)*N), nrow = N)
for(j in 1:(ncats-1)){
Par0[[feature]][,j] <- mean(Data[,feature] == j , na.rm=T)
}
noise <- matrix(rexp(ncats*N), nrow = N)
noise <- noise / rowSums(noise)
Par0[[feature]] = 0.9*Par0[[feature]] + 0.1*noise[,-1]
}
}
# get accuracy of mixture model for each behaviour and state
accs <- matrix(rep(0,N^2),nrow=N,ncol=N)
for(i in 1:N){
# get data associated with the behaviour in question
behaviour_ind <- which(i <= cumsum(statesPerBehaviour))[1]
behaviour_data <- Data[Data$knownState %in% behaviour_ind,]
# get p(X,Y)
pXY <- matrix(rep(0,N*nrow(behaviour_data)),
nrow=nrow(behaviour_data),ncol=N)
for(j in 1:N){
for(feature in features1){
if(dist[[feature]] == "norm"){
pXY[,j] <- pXY[,j] + dnorm(behaviour_data[,feature],
mean=Par0[[feature]][j,1],
sd=exp(Par0[[feature]][j,2]) + 0.01)
} else if (dist[[feature]] == "mvnorm2") {
featurex <- paste0(feature,".x")
featurey <- paste0(feature,".y")
meanx <- Par0[[feature]][j,1]
meany <- Par0[[feature]][j,2]
sigxx <- exp(Par0[[feature]][j,3]) + 0.01
sigyy <- exp(Par0[[feature]][j,5]) + 0.01
sigxy <- exp(0.5*Par0[[feature]][j,3] +
0.5*Par0[[feature]][j,5] +
-exp(-Par0[[feature]][j,4]))
pXY[,j] <- pXY[,j] + dmvnorm(behaviour_data[,c(featurex,featurey)],
mean=c(meanx,meany),
sigma=matrix(c(sigxx,sigxy,sigxy,sigyy),nrow=2))
} else if (substring(dist[[feature]], 1,3) == "cat") {
probs <- Par0[[feature]][j,]
probs <- c(probs,1.0-sum(probs))
pXY[,j] <- pXY[,j] + probs[behaviour_data[,feature]]
}
}
}
# get p(X|Y) and add to accuracies
p_X_given_Y <- pXY / rowSums(pXY)
accs[i,] <- colSums(p_X_given_Y) / nrow(behaviour_data)
}
hs <- HungarianSolver(-accs)
pairs <- hs$pairs
for(feature in features1){
Par0[[feature]] <- Par0[[feature]][pairs[,2],]
}
m_prob <- 0.001
if (model %in% c("fixed")){
Par0$label = fixPar$label
} else if (model == "random") {
Par0$label <- c(3*mean(Data[,"label"] == 1, na.rm=T), m_prob, m_prob,
m_prob, 3*mean(Data[,"label"] == 2, na.rm=T), m_prob,
m_prob, m_prob, 3*mean(Data[,"label"] == 3, na.rm=T))
}
# Set initial gamma and delta
beta0 <- matrix(rnorm(N*(N-1),mean=-2,sd=1),nrow=1)
delta0 <- matrix(rep(1/N,N),nrow=1)
# prep data
Data0 <- prepData(Data,coordNames=NULL)
eps <- 1e-8
# define the known states
knownStates <- Data$knownState
knownStates[knownStates == 4] <- NA
if (model %in% c("no","random")){
knownStates <- rep(NA,length(knownStates))
}
# fit HMM
hmm <- fitHMM(data=Data0,
nbStates=N,
dist=dist,
DM=DM,
beta0=beta0,
delta0=(1-eps)*delta0 + eps*rep(1/N,N),
Par0=Par0,
fixPar=fixPar,
knownStates=knownStates,
lambda=lamb,
userBounds=userBounds,
workBounds=workBounds,
nlmPar = list('iterlim'=iterlim,
'print.level'=0))
Data
# define models
Data <- data.frame(fread("../../dat/case_study_1_data.csv"))
Data
dist
rawData
# load in the rawData
rawData <- data.frame(fread('../../../dat/Final_rawDataDown_Beth.csv'))
# load in the rawData
rawData <- data.frame(fread('../../../../dat/Final_rawDataDown_Beth.csv'))
Data <- data.frame(fread("../../dat/case_study_1_data.csv"))
# only load in data once
Data <- data.frame(fread("../../dat/case_study_1_data.csv"))
Data <- Data[,c("ID","divenum","stime","logMDDD.x","logMDDD.y","knownState","label")]
write.csv(Data,file = "case_study_1_data.csv")
getwd()
# load in the rawData
rawData <- data.frame(fread('../../../../dat/Final_rawDataDown_Beth.csv'))
rawData <- rawData[,c("p","Time","divenum","segnum")]
write.csv(rawData,file = "case_study_1_rawdata.csv")
rawData$p

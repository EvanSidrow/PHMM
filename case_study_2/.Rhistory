# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
# plot data before fitting model
if(plot & load_raw){
print("plotting data with labels...")
source("src/EDA.R")
}
# create cross-validation groups
source("src/make_test_train.R")
# initialize model lists
models_base <- list()
models_PHMM <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
print(k)
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit the PHMM
print("fitting PHMM...")
source("src/fit_PHMM_coarser.R")
models_PHMM[[k]] <- hmm
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate PHMM
print("evaluating PHMM...")
source("src/eval_PHMM_coarser.R")
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
# plot hmm results
if(plot){
print("plotting PHMM...")
source("src/plot_PHMM_coarser.R")
}
}
# summarize cross-validation results
print("summarizing results...")
print(lambda)
source("src/summarize_results.R")
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
plot <- T # whether to plot results
load_raw <- F # whether to load raw Data from scratch
args = commandArgs(trailingOnly=TRUE)
K <- as.numeric(args[1]) # number of cross-validations (one means just do all the data)
lambda <- as.numeric(args[2]) # lambda for paper
K <- 5
lambda <- 1.0
print(K)
print(lambda)
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
# plot data before fitting model
if(plot & load_raw){
print("plotting data with labels...")
source("src/EDA.R")
}
# create cross-validation groups
source("src/make_test_train.R")
# initialize model lists
models_base <- list()
models_PHMM <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
print(k)
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit the PHMM
print("fitting PHMM...")
source("src/fit_PHMM_coarser.R")
models_PHMM[[k]] <- hmm
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate PHMM
print("evaluating PHMM...")
source("src/eval_PHMM_coarser.R")
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
# plot hmm results
if(plot){
print("plotting PHMM...")
source("src/plot_PHMM_coarser.R")
}
}
viterbi(hmm0)
length(viterbi(hmm0))
Data_less_fine_unlabelled <- prepData(Data_less_fine_final[Data_less_fine_final$divenum %in% test_dives,
c("ID","divenum","stime","ad",names(dist),"knownState")],
coordNames=NULL)
Data_less_fine_unlabelled$true_label <- Data_less_fine_unlabelled$knownState
Data_less_fine_unlabelled$knownState <- 7
Par0 <- getPar0(hmm)
if(lambda == -1){
hmm0 <- fitHMM(data=Data_less_fine_unlabelled,
nbStates=N,
dist=hmm$conditions$dist,
fixPar=list(knownState = hmm$conditions$fixPar$knownState),
DM=hmm$conditions$DM,
beta0=Par0$beta,
delta0=(1-eps)*(Par0$delta)+eps*rep(1/N,N),
Par0=Par0$Par,
nlmPar = list('stepmax'=1e-100,
'iterlim'=1))
} else {
hmm0 <- fitHMM(data=Data_less_fine_unlabelled,
nbStates=N,
dist=hmm$conditions$dist,
DM=hmm$conditions$DM,
beta0=Par0$beta,
delta0=(1-eps)*(Par0$delta)+eps*rep(1/N,N),
Par0=Par0$Par,
nlmPar = list('stepmax'=1e-100,
'iterlim'=1))
}
Data_less_fine_unlabelled$viterbi <- viterbi(hmm0)
Data_less_fine_unlabelled$p_catch <- stateProbs(hmm0)[,4]
Data_less_fine_unlabelled$p_no_fish <- stateProbs(hmm0)[,5]
Data_less_fine_unlabelled$p_fish <- stateProbs(hmm0)[,6]
probs <- c()
labs <- c()
conf_matrices_PHMM[[k]] = matrix(0, nrow = 2, ncol = 2)
rownames(conf_matrices_PHMM[[k]]) <- c("True Positive", "True Negative")
colnames(conf_matrices_PHMM[[k]]) <- c("Pred Positive", "Pred Negative")
for(divenum in test_dives){
if(divenum %in% pos_dives){
rownum <- 1
labs <- c(labs,TRUE)
} else if (divenum %in% neg_dives){
rownum <- 2
labs <- c(labs,FALSE)
}
p_fish <- tail(Data_less_fine_unlabelled$p_fish[Data_less_fine_unlabelled$ID == divenum],1)
p_fish <- p_fish + tail(Data_less_fine_unlabelled$p_catch[Data_less_fine_unlabelled$ID == dive],1)
print(p_fish)
probs <- c(probs,p_fish)
conf_matrices_PHMM[[k]][rownum,1] <- conf_matrices_PHMM[[k]][rownum,1] + p_fish
conf_matrices_PHMM[[k]][rownum,2] <- conf_matrices_PHMM[[k]][rownum,2] + 1 - p_fish
}
divenum
test_dives
p_fish <- tail(Data_less_fine_unlabelled$p_fish[Data_less_fine_unlabelled$ID == divenum],1)
p_fish <- p_fish + tail(Data_less_fine_unlabelled$p_catch[Data_less_fine_unlabelled$ID == dive],1)
print(p_fish)
Data_less_fine_unlabelled$ID == divenum
p_fish <- tail(Data_less_fine_unlabelled$p_fish[Data_less_fine_unlabelled$ID == divenum],1)
p_fish
Data_less_fine_unlabelled$p_catch[Data_less_fine_unlabelled$ID == dive],
tail(Data_less_fine_unlabelled$p_catch[Data_less_fine_unlabelled$ID == dive],1)
Data_less_fine_unlabelled$p_catch
if(divenum %in% pos_dives){
rownum <- 1
labs <- c(labs,TRUE)
} else if (divenum %in% neg_dives){
rownum <- 2
labs <- c(labs,FALSE)
}
p_fish <- tail(Data_less_fine_unlabelled$p_fish[Data_less_fine_unlabelled$ID == divenum],1)
p_fish <- p_fish + tail(Data_less_fine_unlabelled$p_catch[Data_less_fine_unlabelled$ID == divenum],1)
print(p_fish)
probs <- c(probs,p_fish)
conf_matrices_PHMM[[k]][rownum,1] <- conf_matrices_PHMM[[k]][rownum,1] + p_fish
conf_matrices_PHMM[[k]][rownum,2] <- conf_matrices_PHMM[[k]][rownum,2] + 1 - p_fish
for(divenum in test_dives){
if(divenum %in% pos_dives){
rownum <- 1
labs <- c(labs,TRUE)
} else if (divenum %in% neg_dives){
rownum <- 2
labs <- c(labs,FALSE)
}
p_fish <- tail(Data_less_fine_unlabelled$p_fish[Data_less_fine_unlabelled$ID == divenum],1)
p_fish <- p_fish + tail(Data_less_fine_unlabelled$p_catch[Data_less_fine_unlabelled$ID == divenum],1)
print(p_fish)
probs <- c(probs,p_fish)
conf_matrices_PHMM[[k]][rownum,1] <- conf_matrices_PHMM[[k]][rownum,1] + p_fish
conf_matrices_PHMM[[k]][rownum,2] <- conf_matrices_PHMM[[k]][rownum,2] + 1 - p_fish
}
AUCs_PHMM[k] <- roc(response = labs, predictor=probs)$auc
plot(roc(response = labs, predictor=probs))
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
plot <- T # whether to plot results
load_raw <- F # whether to load raw Data from scratch
args = commandArgs(trailingOnly=TRUE)
K <- as.numeric(args[1]) # number of cross-validations (one means just do all the data)
lambda <- as.numeric(args[2]) # lambda for paper
K <- 5
lambda <- 1.0
print(K)
print(lambda)
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
# plot data before fitting model
if(plot & load_raw){
print("plotting data with labels...")
source("src/EDA.R")
}
# create cross-validation groups
source("src/make_test_train.R")
# initialize model lists
models_base <- list()
models_PHMM <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
print(k)
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit the PHMM
print("fitting PHMM...")
source("src/fit_PHMM_coarser.R")
models_PHMM[[k]] <- hmm
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate PHMM
print("evaluating PHMM...")
source("src/eval_PHMM_coarser.R")
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
# plot hmm results
if(plot){
print("plotting PHMM...")
source("src/plot_PHMM_coarser.R")
}
}
k
# evaluate PHMM
print("evaluating PHMM...")
source("src/eval_PHMM_coarser.R")
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
print(k)
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit the PHMM
print("fitting PHMM...")
source("src/fit_PHMM_coarser.R")
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
plot <- T # whether to plot results
load_raw <- F # whether to load raw Data from scratch
args = commandArgs(trailingOnly=TRUE)
K <- as.numeric(args[1]) # number of cross-validations (one means just do all the data)
lambda <- as.numeric(args[2]) # lambda for paper
K <- 5
lambda <- 1.0
print(K)
print(lambda)
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
# plot data before fitting model
if(plot & load_raw){
print("plotting data with labels...")
source("src/EDA.R")
}
# create cross-validation groups
source("src/make_test_train.R")
# initialize model lists
models_base <- list()
models_PHMM <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
print(k)
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit the PHMM
print("fitting PHMM...")
source("src/fit_PHMM_coarser.R")
models_PHMM[[k]] <- hmm
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate PHMM
print("evaluating PHMM...")
source("src/eval_PHMM_coarser.R")
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
# plot hmm results
if(plot){
print("plotting PHMM...")
source("src/plot_PHMM_coarser.R")
}
}
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
plot <- T # whether to plot results
load_raw <- F # whether to load raw Data from scratch
args = commandArgs(trailingOnly=TRUE)
K <- as.numeric(args[1]) # number of cross-validations (one means just do all the data)
lambda <- as.numeric(args[2]) # lambda for paper
K <- 1
lambda <- 1.0
print(K)
print(lambda)
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
# plot data before fitting model
if(plot & load_raw){
print("plotting data with labels...")
source("src/EDA.R")
}
# create cross-validation groups
source("src/make_test_train.R")
# initialize model lists
models_base <- list()
models_PHMM <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
print(k)
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit the PHMM
print("fitting PHMM...")
source("src/fit_PHMM_coarser.R")
models_PHMM[[k]] <- hmm
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate PHMM
print("evaluating PHMM...")
source("src/eval_PHMM_coarser.R")
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
# plot hmm results
if(plot){
print("plotting PHMM...")
source("src/plot_PHMM_coarser.R")
}
}
# summarize cross-validation results
print("summarizing results...")
print(lambda)
source("src/summarize_results.R")
?roc

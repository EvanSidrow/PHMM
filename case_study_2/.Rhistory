dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
df <- data.frame(fread("dat/case_study_2_data.csv"))
df_echo <- data.frame(fread("../../dat/Final_Data_fine.csv"))
df_echo <- df_echo[df_echo$divenum %in% unique(df$divenum),]
df <- merge(df,df_echo[,c("stime","divenum","echo.steady","echo.rapid","crunch")],
all.x=T,all.y=F)
# create cross-validation groups
print("seperating train and test set...")
source("src/make_test_train.R")
# plot the data
print("plotting data...")
source("src/plot_data.R")
# initialize model lists
models_base <- list()
models_rf <- list()
models_svm <- list()
models_lr <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_rf <- list()
probs_svm <- list()
probs_lr <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_rf <- rep(0,K)
AUCs_svm <- rep(0,K)
AUCs_lr <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_rf <- list()
conf_matrices_svm <- list()
conf_matrices_lr <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
models_rf[[k]] <- rf_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
# fit the PHMM
#print("fitting PHMM...")
#best_hmm <- NULL
#max_ll <- -Inf
#for(rand_seed in 1:num_seeds){
#  print(paste("working on fold",k,"of",K,"and seed",rand_seed,"of",num_seeds))
#  source("src/fit_PHMM.R")
#  if(-hmm$mod$minimum > max_ll){
#    best_hmm <- hmm
#    max_ll <- -hmm$mod$minimum
#    print("new best hmm")
#  }
#}
#hmm <- best_hmm
#models_PHMM[[k]] <- hmm
# evaluate PHMM
#print("evaluating PHMM...")
#source("src/eval_PHMM.R")
# plot hmm results
#print("plotting PHMM...")
#source("src/plot_PHMM.R")
}
# summarize cross-validation results
#print("summarizing results...")
#source("src/summarize_results.R")
# plot AUCs
source("src/plot_AUCs.R")
plot0
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
library(latex2exp)
library(randomForest)
library(caret)
library(e1071)
library(logistf)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
args = commandArgs(trailingOnly=TRUE)
K <- 4 #as.numeric(args[1]) # number of cross-validations (one means just do all the data)
lambda <- 0.01 #as.numeric(args[2]) # lambda for paper
num_seeds <- 10 #as.numeric(args[3]) # number of random seeds
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
df <- data.frame(fread("dat/case_study_2_data.csv"))
df_echo <- data.frame(fread("../../dat/Final_Data_fine.csv"))
df_echo <- df_echo[df_echo$divenum %in% unique(df$divenum),]
df <- merge(df,df_echo[,c("stime","divenum","echo.steady","echo.rapid","crunch")],
all.x=T,all.y=F)
# create cross-validation groups
print("seperating train and test set...")
source("src/make_test_train.R")
# plot the data
print("plotting data...")
source("src/plot_data.R")
# initialize model lists
models_base <- list()
models_rf <- list()
models_svm <- list()
models_lr <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_rf <- list()
probs_svm <- list()
probs_lr <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_rf <- rep(0,K)
AUCs_svm <- rep(0,K)
AUCs_lr <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_rf <- list()
conf_matrices_svm <- list()
conf_matrices_lr <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
models_rf[[k]] <- rf_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
# fit the PHMM
#print("fitting PHMM...")
#best_hmm <- NULL
#max_ll <- -Inf
#for(rand_seed in 1:num_seeds){
#  print(paste("working on fold",k,"of",K,"and seed",rand_seed,"of",num_seeds))
#  source("src/fit_PHMM.R")
#  if(-hmm$mod$minimum > max_ll){
#    best_hmm <- hmm
#    max_ll <- -hmm$mod$minimum
#    print("new best hmm")
#  }
#}
#hmm <- best_hmm
#models_PHMM[[k]] <- hmm
# evaluate PHMM
#print("evaluating PHMM...")
#source("src/eval_PHMM.R")
# plot hmm results
#print("plotting PHMM...")
#source("src/plot_PHMM.R")
}
# summarize cross-validation results
#print("summarizing results...")
#source("src/summarize_results.R")
# plot AUCs
source("src/plot_AUCs.R")
plot0
# do prediction for svm
print("svm")
probs <- predict(svm_model, dive_sums, decision.values = TRUE, probability = TRUE)
probs
dive_sums$label
probs_svm[[k]] <- probs
AUCs_svm[k] <- roc(response = dive_sums$label, predictor=probs, direction = "<")$auc
dive_sums$label
probs
probs = attr(probs, "probabilities")[,1]
probs_svm[[k]] <- probs
AUCs_svm[k] <- roc(response = dive_sums$label, predictor=probs, direction = "<")$auc
probs
roc(response = dive_sums$label, predictor=probs, direction = "<")$auc
probs = attr(probs, "probabilities")[,2]
probs_svm[[k]] <- probs
AUCs_svm[k] <- roc(response = dive_sums$label, predictor=probs, direction = "<")$auc
probs
probs <- predict(svm_model, dive_sums, decision.values = TRUE, probability = TRUE)
probs = attr(probs, "probabilities")[,2]
probs_svm[[k]] <- probs
AUCs_svm[k] <- roc(response = dive_sums$label, predictor=probs, direction = "<")$auc
roc(response = dive_sums$label, predictor=probs, direction = "<")$auc
# do prediction for random forest
print("rf")
probs = predict(rf_model, dive_sums, type = "prob")[,1]
probs_rf[[k]] <- probs
AUCs_rf[k] <- roc(response=dive_sums$label, predictor=probs, direction = "<")$auc
plot(roc(response = dive_sums$label, predictor=probs))
AUCs_rf
# do prediction for random forest
print("rf")
probs = predict(rf_model, dive_sums, type = "prob")[,2]
probs_rf[[k]] <- probs
AUCs_rf[k] <- roc(response=dive_sums$label, predictor=probs, direction = "<")$auc
plot(roc(response = dive_sums$label, predictor=probs))
AUCs_rf
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
library(latex2exp)
library(randomForest)
library(caret)
library(e1071)
library(logistf)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
args = commandArgs(trailingOnly=TRUE)
K <- 4 #as.numeric(args[1]) # number of cross-validations (one means just do all the data)
lambda <- 0.01 #as.numeric(args[2]) # lambda for paper
num_seeds <- 10 #as.numeric(args[3]) # number of random seeds
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
df <- data.frame(fread("dat/case_study_2_data.csv"))
df_echo <- data.frame(fread("../../dat/Final_Data_fine.csv"))
df_echo <- df_echo[df_echo$divenum %in% unique(df$divenum),]
df <- merge(df,df_echo[,c("stime","divenum","echo.steady","echo.rapid","crunch")],
all.x=T,all.y=F)
# create cross-validation groups
print("seperating train and test set...")
source("src/make_test_train.R")
# plot the data
print("plotting data...")
source("src/plot_data.R")
# initialize model lists
models_base <- list()
models_rf <- list()
models_svm <- list()
models_lr <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_rf <- list()
probs_svm <- list()
probs_lr <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_rf <- rep(0,K)
AUCs_svm <- rep(0,K)
AUCs_lr <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_rf <- list()
conf_matrices_svm <- list()
conf_matrices_lr <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
models_rf[[k]] <- rf_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
# fit the PHMM
#print("fitting PHMM...")
#best_hmm <- NULL
#max_ll <- -Inf
#for(rand_seed in 1:num_seeds){
#  print(paste("working on fold",k,"of",K,"and seed",rand_seed,"of",num_seeds))
#  source("src/fit_PHMM.R")
#  if(-hmm$mod$minimum > max_ll){
#    best_hmm <- hmm
#    max_ll <- -hmm$mod$minimum
#    print("new best hmm")
#  }
#}
#hmm <- best_hmm
#models_PHMM[[k]] <- hmm
# evaluate PHMM
#print("evaluating PHMM...")
#source("src/eval_PHMM.R")
# plot hmm results
#print("plotting PHMM...")
#source("src/plot_PHMM.R")
}
# summarize cross-validation results
print("summarizing results...")
source("src/summarize_results.R")
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
library(latex2exp)
library(randomForest)
library(caret)
library(e1071)
library(logistf)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
args = commandArgs(trailingOnly=TRUE)
K <- 4 #as.numeric(args[1]) # number of cross-validations (one means just do all the data)
lambda <- 0.01 #as.numeric(args[2]) # lambda for paper
num_seeds <- 10 #as.numeric(args[3]) # number of random seeds
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
df <- data.frame(fread("dat/case_study_2_data.csv"))
df_echo <- data.frame(fread("../../dat/Final_Data_fine.csv"))
df_echo <- df_echo[df_echo$divenum %in% unique(df$divenum),]
df <- merge(df,df_echo[,c("stime","divenum","echo.steady","echo.rapid","crunch")],
all.x=T,all.y=F)
# create cross-validation groups
print("seperating train and test set...")
source("src/make_test_train.R")
# plot the data
print("plotting data...")
source("src/plot_data.R")
# initialize model lists
models_base <- list()
models_rf <- list()
models_svm <- list()
models_lr <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_rf <- list()
probs_svm <- list()
probs_lr <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_rf <- rep(0,K)
AUCs_svm <- rep(0,K)
AUCs_lr <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_rf <- list()
conf_matrices_svm <- list()
conf_matrices_lr <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
models_rf[[k]] <- rf_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
# fit the PHMM
print("fitting PHMM...")
best_hmm <- NULL
max_ll <- -Inf
for(rand_seed in 1:num_seeds){
print(paste("working on fold",k,"of",K,"and seed",rand_seed,"of",num_seeds))
source("src/fit_PHMM.R")
if(-hmm$mod$minimum > max_ll){
best_hmm <- hmm
max_ll <- -hmm$mod$minimum
print("new best hmm")
}
}
hmm <- best_hmm
models_PHMM[[k]] <- hmm
# evaluate PHMM
print("evaluating PHMM...")
source("src/eval_PHMM.R")
# plot hmm results
print("plotting PHMM...")
source("src/plot_PHMM.R")
}
# summarize cross-validation results
print("summarizing results...")
source("src/summarize_results.R")
# plot AUCs
source("src/plot_AUCs.R")
plot0
test_sets
pos_dives
# make plots of AUCs
means <- c()
sds <- c()
AUCs <- c()
param_directory <- "params"#"params_unshared_label_1"
plt_directory <- "plt"#"plt_unshared_label_1"
# load in base AUCS
filename <- paste0(param_directory,"/AUC_base_",K,".csv")
AUCs <- c(AUCs,data.frame(fread(filename))[,2])
means <- c(means,mean(data.frame(fread(filename))[,2]))
sds <- c(sds,sd(data.frame(fread(filename))[,2]))
# load in lr
filename <- paste0(param_directory,"/AUC_lr_",K,".csv")
AUCs <- c(AUCs,data.frame(fread(filename))[,2])
means <- c(means,mean(data.frame(fread(filename))[,2]))
sds <- c(sds,sd(data.frame(fread(filename))[,2]))
# load in svm
filename <- paste0(param_directory,"/AUC_svm_",K,".csv")
AUCs <- c(AUCs,data.frame(fread(filename))[,2])
means <- c(means,mean(data.frame(fread(filename))[,2]))
sds <- c(sds,sd(data.frame(fread(filename))[,2]))
# load in rf
filename <- paste0(param_directory,"/AUC_rf_",K,".csv")
AUCs <- c(AUCs,data.frame(fread(filename))[,2])
means <- c(means,mean(data.frame(fread(filename))[,2]))
sds <- c(sds,sd(data.frame(fread(filename))[,2]))
# load in other AUCs
for(log_alpha in c("-4","-3","-2","-1","0")){
filename <- paste0(param_directory,"/AUC_delt_d_htv_jp_normed_",log_alpha,"_",K,".csv")
AUCs <- c(AUCs,data.frame(fread(filename))[,2])
means <- c(means,mean(data.frame(fread(filename))[,2]))
sds <- c(sds,sd(data.frame(fread(filename))[,2]))
}
# make dataframe
df <- data.frame(alpha = rep(c("Baseline","LR","SVM","RF","0.0001","0.001","0.01","0.1","1"),each = K),
baseline = rep(c(1,2,3,4,F,F,F,F,F),each = K),
fold = rep(1:K,9),
AUC = AUCs)
df_means <- data.frame(alpha = c("Baseline","LR","SVM","RF","0.0001","0.001","0.01","0.1","1"),
baseline = c(1,2,3,4,F,F,F,F,F),
mean = means,
sd = sds)
# ggplot
plot0 <- ggplot(df, aes(x = alpha, y = AUC)) +
#geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 4, alpha = 0.5,
width = 0.05, height = 0.00) +
#geom_line(aes(group = fold),alpha = 0.5) +
geom_point(data = df_means,
aes(x = alpha, y = mean),
shape = "*", size = 20) +
geom_line(data = df_means,
aes(x = alpha, y = mean, group = baseline)) +
#geom_errorbar(data = df_means,
#              aes(x = Alpha, y = mean, ymin=mean-sd, ymax=mean+sd), width=.2,
#              position=position_dodge(0.05)) +
geom_vline(aes(xintercept = 5.5)) +
labs(x=TeX("\\alpha"),y="AUC") +
theme_classic() +
theme(text = element_text(size=16))
#plot0
#plot0 <- ggplot(df_means, aes(x=Alpha, y=mean, group = 1)) +
#  geom_line() +
#  geom_point() +
#  geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
#                position=position_dodge(0.05))
#plot0
ggsave(paste0(directory,"/plt/AUCs_",
paste0(setdiff(names(dist),"knownState"),collapse = "_"),"_",
round(log10(lambda),3),"_",
K,".png"),
plot0,
width = 6, height = 4)
plot0

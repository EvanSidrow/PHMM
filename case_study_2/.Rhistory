scale_color_manual(limits = c("1","2","3","4","5","6"),
labels = c("1" = "descent",
"2" = "bottom",
"3" = "chase",
"4" = "capture",
"5" = "ascent w/o fish",
"6" = "ascent w/ fish"),
values = colors) +
theme_classic() +
theme(strip.background = element_blank(),
strip.placement = "outside",
text = element_text(size=16),
plot.title = element_text(hjust = 0.5)) +
facet_wrap(~feature,ncol = 1,labeller = as_labeller(labs),scales = "free") +
geom_blank(data=lim_df)
plot0
plot0 <- ggplot(df_to_plot, aes(x = x, y = value,
group = state,
color = state)) +
geom_line() +
geom_blank(data=lim_df) +
labs(title = TeX(paste("$\\alpha =", lambda, "$")),
color="", y="Density",
x="") +
scale_color_manual(limits = c("1","2","3","4","5","6"),
labels = c("1" = "descent",
"2" = "bottom",
"3" = "chase",
"4" = "capture",
"5" = "ascent w/o fish",
"6" = "ascent w/ fish"),
values = colors) +
theme_classic() +
theme(strip.background = element_blank(),
strip.placement = "outside",
text = element_text(size=16),
plot.title = element_text(hjust = 0.5)) +
facet_wrap(~feature,ncol = 1,labeller = as_labeller(labs), scales = "free")
plot0
Data_fine
hmm
hmm$data
length(hmm$data)
nrow(hmm$data)
hmm$data$ID
7 / 130
28 / 130
29 / 130
(8 + 19) / 130
(7 + 19) / 130
7 + 19 + 130
(7 + 19 + 130) / nrow(hmm$data)
(1 + 0.75+0.75+0.65) / 4
(1 + 1+0.85+ 1) / 4
directory
model_name <- paste0("hmm_",
paste0(setdiff(names(dist),"knownState"),collapse = "_"),"_",
log10(lambda),"_",
k,"_",K,"_",
rand_seed,".rds")
model_name <- paste0("hmm_",
paste0(setdiff(names(dist),"knownState"),collapse = "_"),"_",
log10(lambda),"_",
1,"_",1,"_",
rand_seed,".rds")
directory
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
library(latex2exp)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
plot <- T # whether to plot results
load_raw <- F # whether to load raw Data from scratch
args = commandArgs(trailingOnly=TRUE)
K <- 1 # number of cross-validations (one means just do all the data)
lambda <- 1 # lambda for paper
num_seeds <- 1 # number of random seeds
# set distributions
dist <- list()
dist[["delt_d"]] <- "norm"
#dist[["rajp"]] <- "vm"
dist[["htv"]] <- "gamma"
dist[["jp_normed"]] <- "gamma"
print("fitting PHMM...")
best_hmm <- NULL
max_ll <- -Inf
for(rand_seed in 1:num_seeds){
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
model_name <- paste0("hmm_",
paste0(setdiff(names(dist),"knownState"),collapse = "_"),"_",
log10(lambda),"_",
1,"_",1,"_",
rand_seed,".rds")
hmm <- readRDS(paste0(directory,"/params/",model_name))
if(-hmm$mod$minimum > max_ll){
best_hmm <- hmm
max_ll <- -hmm$mod$minimum
print("new best hmm")
}
}
hmm <- best_hmm
plot <- T # whether to plot results
load_raw <- F # whether to load raw Data from scratch
args = commandArgs(trailingOnly=TRUE)
K <- 1 # number of cross-validations (one means just do all the data)
lambda <- 1 # lambda for paper
num_seeds <- 10 # number of random seeds
# set distributions
dist <- list()
dist[["delt_d"]] <- "norm"
#dist[["rajp"]] <- "vm"
dist[["htv"]] <- "gamma"
dist[["jp_normed"]] <- "gamma"
print("fitting PHMM...")
best_hmm <- NULL
max_ll <- -Inf
for(rand_seed in 1:num_seeds){
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
model_name <- paste0("hmm_",
paste0(setdiff(names(dist),"knownState"),collapse = "_"),"_",
log10(lambda),"_",
1,"_",1,"_",
rand_seed,".rds")
hmm <- readRDS(paste0(directory,"/params/",model_name))
print(-hmm$mod$minimum)
if(-hmm$mod$minimum > max_ll){
best_hmm <- hmm
max_ll <- -hmm$mod$minimum
print("new best hmm")
}
}
print(hmm)
print(best_hmm)
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
library(latex2exp)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
plot <- T # whether to plot results
load_raw <- F # whether to load raw Data from scratch
args = commandArgs(trailingOnly=TRUE)
K <- 1 # number of cross-validations (one means just do all the data)
lambda <- 0.0001 # lambda for paper
num_seeds <- 10 # number of random seeds
# set distributions
dist <- list()
dist[["delt_d"]] <- "norm"
#dist[["rajp"]] <- "vm"
dist[["htv"]] <- "gamma"
dist[["jp_normed"]] <- "gamma"
print("fitting PHMM...")
best_hmm <- NULL
max_ll <- -Inf
for(rand_seed in 1:num_seeds){
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
model_name <- paste0("hmm_",
paste0(setdiff(names(dist),"knownState"),collapse = "_"),"_",
log10(lambda),"_",
1,"_",1,"_",
rand_seed,".rds")
hmm <- readRDS(paste0(directory,"/params/",model_name))
print(-hmm$mod$minimum)
if(-hmm$mod$minimum > max_ll){
best_hmm <- hmm
max_ll <- -hmm$mod$minimum
print("new best hmm")
}
}
hmm <- best_hmm
print(hmm)
lambda
3.85 / 4
Data_less_fine_unlabelled$ID
Data_less_fine_final$ID
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
library(latex2exp)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
plot <- T # whether to plot results
load_raw <- F # whether to load raw Data from scratch
args = commandArgs(trailingOnly=TRUE)
K <- 1
k <- 1
lambda <- 0.01
num_seeds <- 10
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
# load in coarse data
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
# create cross-validation groups
source("src/make_test_train.R")
# initialize model lists
models_base <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
# fit the PHMM
print("fitting PHMM...")
best_hmm <- NULL
max_ll <- -Inf
for(rand_seed in 1:num_seeds){
print(paste("working on fold",k,"of",K,"and seed",rand_seed,"of",num_seeds))
source("src/fit_PHMM_coarser.R")
if(-hmm$mod$minimum > max_ll){
best_hmm <- hmm
max_ll <- -hmm$mod$minimum
print("new best hmm")
}
}
hmm <- best_hmm
models_PHMM[[k]] <- hmm
hmm
# evaluate PHMM
print("evaluating PHMM...")
source("src/eval_PHMM_coarser.R")
Data_less_fine_unlabelled <- prepData(Data_less_fine_final[,c("ID","divenum","stime","ad",names(dist),"knownState")],
coordNames=NULL)
Data_less_fine_unlabelled$true_label <- Data_less_fine_unlabelled$knownState
Data_less_fine_unlabelled$knownState <- 7
Par0 <- getPar0(hmm)
hmm0 <- fitHMM(data=Data_less_fine_unlabelled,
nbStates=N,
dist=hmm$conditions$dist,
DM=hmm$conditions$DM,
beta0=Par0$beta,
delta0=(1-eps)*(Par0$delta)+eps*rep(1/N,N),
Par0=Par0$Par,
nlmPar = list('stepmax'=1e-100,
'iterlim'=1))
Data_less_fine_unlabelled$viterbi <- viterbi(hmm0)
Data_less_fine_unlabelled$p_catch <- stateProbs(hmm0)[,4]
Data_less_fine_unlabelled$p_no_fish <- stateProbs(hmm0)[,5]
Data_less_fine_unlabelled$p_fish <- stateProbs(hmm0)[,6]
probs <- c()
labs <- c()
conf_matrices_PHMM[[k]] = matrix(0, nrow = 2, ncol = 2)
rownames(conf_matrices_PHMM[[k]]) <- c("True Positive", "True Negative")
colnames(conf_matrices_PHMM[[k]]) <- c("Pred Positive", "Pred Negative")
for(divenum in test_dives){
if(divenum %in% pos_dives){
rownum <- 1
labs <- c(labs,TRUE)
} else if (divenum %in% neg_dives){
rownum <- 2
labs <- c(labs,FALSE)
}
p_fish <- tail(Data_less_fine_unlabelled$p_fish[Data_less_fine_unlabelled$ID == divenum],1)
p_fish <- p_fish + tail(Data_less_fine_unlabelled$p_catch[Data_less_fine_unlabelled$ID == divenum],1)
print(p_fish)
probs <- c(probs,p_fish)
conf_matrices_PHMM[[k]][rownum,1] <- conf_matrices_PHMM[[k]][rownum,1] + p_fish
conf_matrices_PHMM[[k]][rownum,2] <- conf_matrices_PHMM[[k]][rownum,2] + 1 - p_fish
}
probs_PHMM[[k]] <- probs
AUCs_PHMM[k] <- roc(response = labs, predictor=probs, direction = "<")$auc
Data_less_fine_unlabelled
Data_less_fine_unlabelled$ID
unique(Data_less_fine_unlabelled$ID)
levels(Data_less_fine_unlabelled$ID)
labs <- c(Elevation = "Depth (m)",
maxDepth = "Maximum Depth (m)",
diveDuration = "Dive Duration (s)",
w_low = "Wiggliness (Low Frequency)",
w_high = "Wiggliness (High Frequency)",
logWLow = "Wiggliness (Low Frequency) (log10)",
logWHigh = "Wiggliness (High Frequency) (log10)",
logWTotal = "Wiggliness (Total) (log10)",
postDiveInt = "Post Dive Interval (s)",
htv = "Heading Total Variation (rad / s)",
logHtv = "Heading Total Variation (rad) (log10)",
logJpNorm = "Jerk Peak (normalized, log10)",
jp_normed = "Jerk Peak (normalized)",
delt_d = "Change in Depth (m)",
roll = "Roll (rad)",
rajp = "Roll @ Peak Jerk (rad)",
p_catch = "Probability of Catch",
VeDBA = "VeDBA")
plot_dives <- function(dives,df){
for(dive in dives){
if(dive %in% pos_dives){
title0 <- "pos"
} else if (dive %in% neg_dives){
title0 <- "neg"
} else {
title0 <- "NA"
}
title1 <- tail(df$p_fish[df$ID == dive],1)
title1 <- title1 + tail(df$p_catch[df$ID == dive],1)
title1 <- round(title1, 3)
dive_df <- df[df$ID == dive,]
dive_df$Elevation <- -dive_df$ad
stime <- min(dive_df$stime,na.rm=T)
dive_df$stime <- (dive_df$stime - min(dive_df$stime,na.rm=T))/60
cols_to_plot <- c("Elevation","p_catch",setdiff(names(dist),c("knownState")))
dive_df_long <- dive_df %>%
pivot_longer(cols = cols_to_plot,
names_to = "feature")
colors <- hcl(h = seq(15, 375, length = 6 + 1),
l = 65, c = 100)[1:6]
colors <- c("1" = colors[1],
"2" = colors[2],
"3" = colors[3],
"4" = colors[4],
"5" = colors[5],
"6" = colors[6])
if(lambda == 1.0){
legend.pos <- "right"
wid <- 8
} else {
legend.pos <- "none"
wid <- 6
}
plot0 <- ggplot(dive_df_long,aes(x=stime, y=value)) +
geom_line() +
geom_point(aes(color=factor(viterbi,levels=1:6),
group=divenum,
shape=viterbi==4),
size = 2) +
geom_hline(yintercept = 0) +
geom_vline(aes(xintercept = stime),
data = dive_df %>% dplyr::filter(true_label == 4)) +
labs(title = TeX(paste("$\\alpha =", lambda, "$, ",
"$P(X_{s,T_s} \\in \\{4,6\\} \\ | \\ Y_s) =", title1, "$")),
color="", y="",
x="Time (min)") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 5)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 5)) +
scale_color_manual(limits = c("1","2","3","4","5","6"),
labels = c("1" = "descent",
"2" = "bottom",
"3" = "chase",
"4" = "capture",
"5" = "ascent w/o fish",
"6" = "ascent w/ fish"),
values = colors) +
scale_shape_manual(values = c(19,8),
guide = "none") +
theme_classic() +
theme(strip.background = element_blank(),
strip.placement = "outside",
text = element_text(size=16),
legend.position = legend.pos,
plot.title = element_text(hjust = 0.5)) +
facet_wrap(~feature, ncol = 1, labeller = as_labeller(labs), scales = "free_y")
ggsave(paste0(directory,"/plt/profile_",
paste0(setdiff(names(dist),"knownState"),collapse = "_"),"_",
round(log10(lambda),3),"_",
K,"_",
title0,"_",
dive,".png"),
plot0,
width = wid, height = 8)
print(plot0)
print(dive)
}
}
#plot_dives(setdiff(dives,c(pos_dives,neg_dives)),"NA")
#plot_dives(neg_dives,"neg")
#plot_dives(pos_dives,"pos")
#plot_dives(test_dives,Data_less_fine_unlabelled)
plot_dives(unique(Data_less_fine_unlabelled$ID),Data_less_fine_unlabelled)
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
library(latex2exp)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
plot <- T # whether to plot results
load_raw <- F # whether to load raw Data from scratch
args = commandArgs(trailingOnly=TRUE)
K <- as.numeric(args[1]) # number of cross-validations (one means just do all the data)
lambda <- as.numeric(args[2]) # lambda for paper
num_seeds <- as.numeric(args[3]) # number of random seeds
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
K <- 1
Data_fine[Data_fine$ID == "5503",]
Data_fine$stime[Data_fine$ID == "5503",]
Data_fine$stime[Data_fine$ID == "5503"]
Data_fine[Data_fine$ID == "5503",c("stime","ID")]
Data_fine[Data_fine$ID == "5503",c("stime","whale")]
Data_fine$whale
Data[Data$divenum == "5503",c("ID","stime")]
Data[Data$divenum %in% "5503",c("ID","stime")]
Data[Data$divenum %in% "24",c("ID","stime")]
Data$label
Data[Data$divenum %in% "24",c("ID","stime","label")]
Data[Data$divenum %in% "1",c("ID","stime","label")]
Data[Data$divenum %in% "24",c("ID","stime","label")]
Data[Data$divenum %in% "24",c("ID","stime","label")]
Data[Data$divenum %in% "403",c("ID","stime","label")]
Data[Data$divenum %in% "403",c("ID","stime","label")]
Data[Data$ID %in% "A113a",c("ID","stime","label")]
head(Data[Data$ID %in% "A113a",c("ID","stime","label")])
Data[Data$divenum %in% "403",c("ID","stime","label")]
Data[Data$divenum %in% "1070",c("ID","stime","label")]
head(Data[Data$ID %in% "A113b",c("ID","stime","label")])
Data[Data$divenum %in% "2023",c("ID","stime","label")]
head(Data[Data$ID %in% "D21b",c("ID","stime","label")])
Data[Data$divenum %in% "2220",c("ID","stime","label")]
Data[Data$divenum %in% "3020",c("ID","stime","label")]
Data[Data$divenum %in% "3618",c("ID","stime","label")]
head(Data[Data$ID %in% "I107a",c("ID","stime","label")])
Data[Data$divenum %in% "3648",c("ID","stime","label")]
Data[Data$divenum %in% "3761",c("ID","stime","label")]
Data[Data$divenum %in% "4072",c("ID","stime","label")]
Data[Data$divenum %in% "4156",c("ID","stime","label")]
Data[Data$divenum %in% "4220",c("ID","stime","label")]
Data[Data$divenum %in% "4434",c("ID","stime","label")]

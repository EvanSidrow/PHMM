plot0 <- ggplot(df, aes(x = alpha, y = AUC)) +
#geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 5, alpha = 0.5,
width = 0.1, height = 0.1) +
geom_point(data = df_means,
aes(x = alpha, y = mean),
shape = "*", size = 20) +
geom_line(data = df_means,
aes(x = alpha, y = mean, group = baseline)) +
#geom_errorbar(data = df_means,
#              aes(x = Alpha, y = mean, ymin=mean-sd, ymax=mean+sd), width=.2,
#              position=position_dodge(0.05)) +
geom_vline(aes(xintercept = 4.5)) +
labs(x=TeX("\\alpha"),y="AUC") +
theme_classic() +
theme(text = element_text(size=16))
plot0
# ggplot
plot0 <- ggplot(df, aes(x = alpha, y = AUC)) +
#geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 5, alpha = 0.5,
width = 0.1, height = 0.01) +
geom_point(data = df_means,
aes(x = alpha, y = mean),
shape = "*", size = 20) +
geom_line(data = df_means,
aes(x = alpha, y = mean, group = baseline)) +
#geom_errorbar(data = df_means,
#              aes(x = Alpha, y = mean, ymin=mean-sd, ymax=mean+sd), width=.2,
#              position=position_dodge(0.05)) +
geom_vline(aes(xintercept = 4.5)) +
labs(x=TeX("\\alpha"),y="AUC") +
theme_classic() +
theme(text = element_text(size=16))
plot0
# ggplot
plot0 <- ggplot(df, aes(x = alpha, y = AUC)) +
#geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 5, alpha = 0.5,
width = 0.01, height = 0.01) +
geom_point(data = df_means,
aes(x = alpha, y = mean),
shape = "*", size = 20) +
geom_line(data = df_means,
aes(x = alpha, y = mean, group = baseline)) +
#geom_errorbar(data = df_means,
#              aes(x = Alpha, y = mean, ymin=mean-sd, ymax=mean+sd), width=.2,
#              position=position_dodge(0.05)) +
geom_vline(aes(xintercept = 4.5)) +
labs(x=TeX("\\alpha"),y="AUC") +
theme_classic() +
theme(text = element_text(size=16))
plot0
# ggplot
plot0 <- ggplot(df, aes(x = alpha, y = AUC)) +
#geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 4, alpha = 0.5,
width = 0.05, height = 0.00) +
geom_point(data = df_means,
aes(x = alpha, y = mean),
shape = "*", size = 20) +
geom_line(data = df_means,
aes(x = alpha, y = mean, group = baseline)) +
#geom_errorbar(data = df_means,
#              aes(x = Alpha, y = mean, ymin=mean-sd, ymax=mean+sd), width=.2,
#              position=position_dodge(0.05)) +
geom_vline(aes(xintercept = 4.5)) +
labs(x=TeX("\\alpha"),y="AUC") +
theme_classic() +
theme(text = element_text(size=16))
plot0
# make plots of AUCs
means <- c()
sds <- c()
AUCs <- c()
param_directory <- "params_unshared"
plt_directory <- "plt_unshared"
# load in base AUCS
filename <- paste0(param_directory,"/AUC_base_4.csv")
AUCs <- c(AUCs,data.frame(fread(filename))[,2])
means <- c(means,mean(data.frame(fread(filename))[,2]))
sds <- c(sds,sd(data.frame(fread(filename))[,2]))
# load in other AUCs
for(log_alpha in c("-4","-2","-1","0")){
filename <- paste0(param_directory,"/AUC_delt_d_rajp_htv_jp_normed_",log_alpha,"_4.csv")
AUCs <- c(AUCs,data.frame(fread(filename))[,2])
means <- c(means,mean(data.frame(fread(filename))[,2]))
sds <- c(sds,sd(data.frame(fread(filename))[,2]))
}
# make plots of AUCs
means <- c()
sds <- c()
AUCs <- c()
param_directory <- "params_unshared_label_no_3161"
plt_directory <- "plt_unshared_label_no_3161"
# load in base AUCS
filename <- paste0(param_directory,"/AUC_base_4.csv")
AUCs <- c(AUCs,data.frame(fread(filename))[,2])
means <- c(means,mean(data.frame(fread(filename))[,2]))
sds <- c(sds,sd(data.frame(fread(filename))[,2]))
# load in other AUCs
for(log_alpha in c("-4","-2","-1","0")){
filename <- paste0(param_directory,"/AUC_delt_d_rajp_htv_jp_normed_",log_alpha,"_4.csv")
AUCs <- c(AUCs,data.frame(fread(filename))[,2])
means <- c(means,mean(data.frame(fread(filename))[,2]))
sds <- c(sds,sd(data.frame(fread(filename))[,2]))
}
# make plots of AUCs
means <- c()
sds <- c()
AUCs <- c()
param_directory <- "params_unshared_label_no_3161"
plt_directory <- "plt_unshared_label_no_3161"
K <- "3"
# load in base AUCS
filename <- paste0(param_directory,"/AUC_base_",K,".csv")
AUCs <- c(AUCs,data.frame(fread(filename))[,2])
means <- c(means,mean(data.frame(fread(filename))[,2]))
sds <- c(sds,sd(data.frame(fread(filename))[,2]))
# load in other AUCs
for(log_alpha in c("-4","-2","-1","0")){
filename <- paste0(param_directory,"/AUC_delt_d_rajp_htv_jp_normed_",log_alpha,"_",K,".csv")
AUCs <- c(AUCs,data.frame(fread(filename))[,2])
means <- c(means,mean(data.frame(fread(filename))[,2]))
sds <- c(sds,sd(data.frame(fread(filename))[,2]))
}
# make dataframe
df <- data.frame(alpha = rep(c("Baseline","0.0001","0.01","0.1","1"),each = 4),
baseline = rep(c(T,F,F,F,F),each = 4),
AUC = AUCs)
# make plots of AUCs
means <- c()
sds <- c()
AUCs <- c()
param_directory <- "params_unshared_label_no_3161"
plt_directory <- "plt_unshared_label_no_3161"
K <- "3"
# load in base AUCS
filename <- paste0(param_directory,"/AUC_base_",K,".csv")
AUCs <- c(AUCs,data.frame(fread(filename))[,2])
means <- c(means,mean(data.frame(fread(filename))[,2]))
sds <- c(sds,sd(data.frame(fread(filename))[,2]))
# load in other AUCs
for(log_alpha in c("-4","-2","-1","0")){
filename <- paste0(param_directory,"/AUC_delt_d_rajp_htv_jp_normed_",log_alpha,"_",K,".csv")
AUCs <- c(AUCs,data.frame(fread(filename))[,2])
means <- c(means,mean(data.frame(fread(filename))[,2]))
sds <- c(sds,sd(data.frame(fread(filename))[,2]))
}
# make dataframe
df <- data.frame(alpha = rep(c("Baseline","0.0001","0.01","0.1","1"),each = K),
baseline = rep(c(T,F,F,F,F),each = K),
AUC = AUCs)
df_means <- data.frame(alpha = c("Baseline","0.0001","0.01","0.1","1"),
baseline = c(T,F,F,F,F),
mean = means,
sd = sds)
# ggplot
plot0 <- ggplot(df, aes(x = alpha, y = AUC)) +
#geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 4, alpha = 0.5,
width = 0.05, height = 0.00) +
geom_point(data = df_means,
aes(x = alpha, y = mean),
shape = "*", size = 20) +
geom_line(data = df_means,
aes(x = alpha, y = mean, group = baseline)) +
#geom_errorbar(data = df_means,
#              aes(x = Alpha, y = mean, ymin=mean-sd, ymax=mean+sd), width=.2,
#              position=position_dodge(0.05)) +
geom_vline(aes(xintercept = 4.5)) +
labs(x=TeX("\\alpha"),y="AUC") +
theme_classic() +
theme(text = element_text(size=16))
plot0
#plot0 <- ggplot(df_means, aes(x=Alpha, y=mean, group = 1)) +
#  geom_line() +
#  geom_point() +
#  geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
#                position=position_dodge(0.05))
#plot0
ggsave(paste0(plt_directory,"/AUCs_delt_d_htv_jp_normed_",K,".png"),
plot0,
width = 6, height = 4)
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
library(latex2exp)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
plot <- T # whether to plot results
load_raw <- F # whether to load raw Data from scratch
args = commandArgs(trailingOnly=TRUE)
K <- 1
lambda <- 1
num_seeds <- 1
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
K <- 3
# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
# load in coarse data
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
# plot data before fitting model
if(plot & load_raw){
print("plotting data with labels...")
source("src/EDA.R")
}
# create cross-validation groups
source("src/make_test_train.R")
# initialize model lists
models_base <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
}
AUCs_base
# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
# load in coarse data
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
# plot data before fitting model
if(plot & load_raw){
print("plotting data with labels...")
source("src/EDA.R")
}
# create cross-validation groups
source("src/make_test_train.R")
# initialize model lists
models_base <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
}
AUCs_base
K <- 4
# create cross-validation groups
source("src/make_test_train.R")
# initialize model lists
models_base <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
}
AUCs_base
Data_fine$knownState
Data_fine$knownState %in% 1
sum(Data_fine$knownState %in% 1)
sum(Data_fine$knownState %in% 3)
sum(Data_fine$knownState %in% 4)
sum(Data_fine$knownState %in% 5)
sum(Data_fine$knownState %in% 6)
pos_dives
K <- 8
# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
# load in coarse data
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
# plot data before fitting model
if(plot & load_raw){
print("plotting data with labels...")
source("src/EDA.R")
}
# create cross-validation groups
source("src/make_test_train.R")
# initialize model lists
models_base <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
}
AUCs_base
mean(AUCs_base)
K <- 4
# initialize model lists
models_base <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
}
AUCs_base
# create cross-validation groups
source("src/make_test_train.R")
# initialize model lists
models_base <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
}
AUCs_base
mean(AUCs_base)
K <- 8
# create cross-validation groups
source("src/make_test_train.R")
# initialize model lists
models_base <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
}
AUCs_base <- rep(0,K)
for(k in 1:K){
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
}
AUCs_base
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
# load in coarse data
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
# plot data before fitting model
if(plot & load_raw){
print("plotting data with labels...")
source("src/EDA.R")
}
# create cross-validation groups
source("src/make_test_train.R")
# initialize model lists
models_base <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
for(k in 1:K){
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit baseline
print("fitting baseline...")
source("src/fit_base.R")
models_base[[k]] <- base_model
# evaluate baseline
print("evaluating baseline...")
source("src/eval_base.R")
}
AUCs_base
mean(AUCs_base)
pos_dives
exp(-4)
exp(-2)

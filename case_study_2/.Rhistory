print("")
}
}
}
alpha1
alpha2
for(alpha1 in round(seq(0.05,1.95,0.01),2)){
for(alpha2 in round(seq(-0.95,1-alpha1,0.01),2)){
if((alpha1 != (1.00 - alpha2)) & (alpha1 != alpha2) & (alpha1 != (2.00-alpha2))){
print(c(alpha1,alpha2))
print(ARMAacf(c(alpha1,alpha2)))
print(ARMAacf(c(alpha2,alpha1-1)))
print(ARMAacf(c(alpha1-1,alpha2)))
print(ARMAacf(c(alpha2)))
print("")
}
}
}
alpha1 != (1.00 - alpha2)
alpha1
a1.00 - alpha2
1.00 - alpha2
1 - alpha2
alpha1 != (1 - alpha2)
all.equal()
?all.equal
?identical
all.equal(alpha1, 1 - alpha2)
(alpha1 == 1 - alpha2)
all.equal(alpha1, c(1 - alpha2,1234))
for(alpha1 in round(seq(0.05,1.95,0.01),2)){
for(alpha2 in round(seq(-0.95,1-alpha1,0.01),2)){
if((alpha1 != round(1.00 - alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2))){
print(c(alpha1,alpha2))
print(ARMAacf(c(alpha1,alpha2)))
print(ARMAacf(c(alpha2,alpha1-1)))
print(ARMAacf(c(alpha1-1,alpha2)))
print(ARMAacf(c(alpha2)))
print("")
}
}
}
alpha1
alpha2
2.00 - alpha2
print(ARMAacf(c(alpha1,alpha2)))
print(ARMAacf(c(alpha2,alpha1-1)))
alpha2 / (2 - alpha1)
for(alpha1 in round(seq(0.05,1.95,0.01),2)){
for(alpha2 in round(seq(-0.95,1-alpha1,0.01),2)){
if((alpha1 != round(1.00 - alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
print(c(alpha1,alpha2))
print(ARMAacf(c(alpha1,alpha2)))
print(ARMAacf(c(alpha2,alpha1-1)))
print(ARMAacf(c(alpha1-1,alpha2)))
print(ARMAacf(c(alpha2)))
print("")
}
}
}
for(alpha1 in round(seq(0.05,1.95,0.01),2)){
for(alpha2 in round(seq(-0.95,1-alpha1,0.01),2)){
if((alpha1 != round(1.00 - alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
print(c(alpha1,alpha2))
print(ARMAacf(c(alpha1,alpha2)))
print(ARMAacf(c(alpha2,alpha1-1)))
print(ARMAacf(c(alpha1-1,alpha2)))
print(ARMAacf(c(alpha2)))
print("")
}
}
}
valid <- F
while(!valid){
alpha1 <- runif(1, min=0.05, max=1.95)
alpha1 <- round(alpha1, 2)
alpha2 <- runif(1, min=-0.95, max=1-alpha1)
alpha2 <- round(alpha2, 2)
if((alpha1 != round(1.00 - alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
valid <- T
}
}
alpha1
alpha2
for(i in 1:1000){
valid <- F
while(!valid){
alpha1 <- runif(1, min=0.05, max=1.95)
alpha1 <- round(alpha1, 2)
alpha2 <- runif(1, min=-0.95, max=1-alpha1)
alpha2 <- round(alpha2, 2)
if((alpha1 != round(1.00-alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
valid <- T
}
}
}
for(i in 1:10000){
valid <- F
while(!valid){
alpha1 <- runif(1, min=0.05, max=1.95)
alpha1 <- round(alpha1, 2)
alpha2 <- runif(1, min=-0.95, max=1-alpha1)
alpha2 <- round(alpha2, 2)
if((alpha1 != round(1.00-alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
valid <- T
}
}
}
for(i in 1:10000){
valid <- F
while(!valid){
alpha1 <- runif(1, min=0.05, max=1.95)
alpha1 <- round(alpha1, 2)
alpha2 <- runif(1, min=-0.95, max=1-alpha1)
alpha2 <- round(alpha2, 2)
if((alpha1 != round(1.00-alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
valid <- T
} else {
print("hi")
}
}
}
for(i in 1:10000){
for(trynum in 1:10){
alpha1 <- runif(1, min=0.05, max=1.95)
alpha1 <- round(alpha1, 2)
alpha2 <- runif(1, min=-0.95, max=1-alpha1)
alpha2 <- round(alpha2, 2)
if((alpha1 != round(1.00-alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
break
}
}
}
alpha1
alpha2
for(i in 1:10000){
for(trynum in 1:10){
alpha1 <- runif(1, min=0.05, max=1.95)
alpha1 <- round(alpha1, 2)
alpha2 <- runif(1, min=-0.95, max=1-alpha1)
alpha2 <- round(alpha2, 2)
if((alpha1 != round(1.00-alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
break
} else {
print("hi")
}
}
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
df <- read.csv("NINO34.csv")
df <- df %>% pivot_longer(!Year,
names_to = "month",
values_to = "ENI")
df <- df[!is.na(df$ENI),]
X <- ts(df$ENI, start = c(1870,1), frequency = 12)
Xtr <- window(X, start=c(1870,1), end=c(2021,12), frequency = 12)
Xte <- window(X, start=c(2022,1), end=c(2023,11), frequency = 12)
plot(Xtr,
main = "Monthly Average Sea Surface Temperatures",
xlab = "Year",
ylab = "Temperature (degrees C)")
acf(Xtr, lag.max = 12*10, main = "", xlab = "Lag (years)")
pacf(Xtr, lag.max = 12*10, main = "", xlab = "Lag (years)")
Xtr.stl <- stl(Xtr,s.window = "periodic")
Xtr.ds <- Xtr - Xtr.stl$time.series[,"seasonal"]
plot(Xtr.ds,
main = "Monthly Average Sea Surface Temperatures, de-Seasonalized",
xlab = "Year",
ylab = "Temperature Deviation (degrees C)")
acf(Xtr.ds, lag.max = 10*12)
pacf(Xtr.ds, lag.max = 10*12)
fm1 <- arima(Xtr.ds,order = c(1,0,0))
fm6 <- arima(Xtr.ds,order = c(6,0,0))
print(fm1)
print(fm6)
print(paste("AIC for AR(1):",AIC(fm1)))
print(paste("AIC for AR(6):",AIC(fm6)))
tsdiag(fm1)
tsdiag(fm6)
pred1 <- predict(fm1,23)
pred1$pred <- pred1$pred + Xtr.stl$time.series[,"seasonal"][1:23]
print(paste("MSPE for the AR(1) process:", mean((Xte - pred1$pred)^2)))
pred6 <- predict(fm6,23)
pred6$pred <- pred6$pred + Xtr.stl$time.series[,"seasonal"][1:23]
print(paste("MSPE for the AR(6) process:", mean((Xte - pred6$pred)^2)))
lb1 <- pred1$pred - 1.96*pred1$se
ub1 <- pred1$pred + 1.96*pred1$se
lb6 <- pred6$pred - 1.96*pred6$se
ub6 <- pred6$pred + 1.96*pred6$se
# plot models
plot(Xte,
ylim = c(24,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR model predictions")
lines(pred1$pred,col="red")
lines(lb1,lty = 2, col = "red")
lines(ub1,lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "AR(1) predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw <- HoltWinters(Xtr, beta = F)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
predHw <- predict(hw, newdata = Xte, prediction.interval = T, level = 0.95)
predHw
predHw <- predict(hw, newdata = Xte, n.ahead = 23 prediction.interval = T, level = 0.95)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr, beta = F)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw <- HoltWinters(Xtr, beta = T)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw <- HoltWinters(Xtr, beta = T, gamma = T)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
HoltWinters
?HoltWinters
hw <- HoltWinters(Xtr, beta = T, gamma = T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw
hw$fitted\
hw$fitted
hw$fitted[,"trend"]
print(hw$fitted[,"trend"]_
print(hw$fitted[,"trend"])
plot(hw$fitted[,"trend"])
plot(hw$fitted[100:,"trend"])
print(hw$fitted[,"trend"])
print(hw$fitted[1953,"trend"])
print(hw$fitted[100,"trend"])
print(hw$fitted[100:200,"trend"])
plot(hw$fitted[100:200,"trend"])
plot(hw$fitted[100:200,"trend"],linetype="l")
plot(hw$fitted[100:200,"trend"],lty="l")
plot(1:100,hw$fitted[100:200,"trend"],lty=2)
plot(0:100,hw$fitted[100:200,"trend"],lty=2)
plot(0:100,hw$fitted[100:200,"trend"],lty=1)
?plot
plot(0:100,hw$fitted[100:200,"trend"],"l")
plot(0:100,hw$fitted[200:300,"trend"],"l")
plot(0:100,hw$fitted[300:400,"trend"],"l")
plot(0:100,hw$fitted[400:500,"trend"],"l")
plot(0:100,hw$fitted[500:600,"trend"],"l")
hw <- HoltWinters(Xtr, beta = T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
?HoltWinters
hw
hw <- HoltWinters(Xtr,beta=T)
hw
hw <- HoltWinters(Xtr)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw$
asdf
predHw
predHw$fit
hw <- HoltWinters(Xtr,beta=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw$fit
predHw
hw <- HoltWinters(Xtr,beta=T,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw
predHw$
asdf
hw <- HoltWinters(Xtr)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr,beta=F)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr,beta=T,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
predHw
hw <- HoltWinters(Xtr,beta=T,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
predHw
hw$fitted
hw
hw$gamma
hw <- HoltWinters(Xtr,beta=1,gamma=1)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw
library(mgcv)
?fit_ps
?dchi
rchisq(1000, 3)
2*rchisq(1000, 3)
sqrt(2*rchisq(1000, 3))
sqrt(2*rchisq(1000000, 3))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(rchisq(1000000, 3)))
mean(sqrt(rchisq(1000000, 3)))
mean(sqrt(rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
std(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 3)))
sd(sqrt(2*rchisq(10000000, 3)))
sd(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 6)))
mean(sqrt(2*rchisq(10000000, 6)))
mean(sqrt(2*rchisq(10000000, 6)))
mean(sqrt(2*rchisq(10000000, 6)))
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
library(latex2exp)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
plot <- T # whether to plot results
load_raw <- F # whether to load raw Data from scratch
args = commandArgs(trailingOnly=TRUE)
K <- as.numeric(args[1]) # number of cross-validations (one means just do all the data)
lambda <- as.numeric(args[2]) # lambda for paper
num_seeds <- as.numeric(args[3]) # number of random seeds
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
# load in coarse data
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
Data$maxDepth
hist(Data$maxDepth)
hist(log10(Data$maxDepth))
hist(log10(Data$maxDepth),breaks=100)
log10(Data$maxDepth)[-1]
log10(Data$maxDepth)[-nrow(Data)]
plot(log10(Data$maxDepth)[-nrow(Data)],log10(Data$maxDepth)[-1])
plot(log10(Data$diveDuration)[-nrow(Data)],log10(Data$diveDuration)[-1])
gglagplot(log10(Data$maxDepth))
plot(log10(Data$diveDuration)[-nrow(Data)],log10(Data$diveDuration)[-1],pch='.')
plot(log10(Data$maxDepth)[-nrow(Data)],log10(Data$maxDepth)[-1],pch=".")
plot(log10(Data$diveDuration)[-nrow(Data)],log10(Data$diveDuration)[-1],pch='.')
plot(log10(Data$maxDepth)[-nrow(Data)],log10(Data$maxDepth)[-1],pch=".")
plot(log10(Data$maxDepth),log10(Data$diveduration),pch=".")
plot(log10(Data$maxDepth),log10(Data$diveduration),pch=".")
plot(log10(Data$maxDepth),log10(Data$diveDuration),pch=".")
hist(log10(Data$maxDepth))
hist(log10(Data$maxDepth),breaks = 100)
hist(log10(Data$diveDuration),breaks = 100)
hist(log10(Data$diveDuration),breaks = 100)
hist(log10(Data$maxDepth),breaks = 100)
plot(log10(Data$maxDepth),log10(Data$diveDuration),pch=".")
paste("$\\alpha =", lambda, "$")
lambda = 0.0001
paste("$\\alpha =", lambda, "$")
?paste
options(scipen=999)
paste("$\\alpha =", lambda, "$")
?options

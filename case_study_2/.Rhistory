lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "AR(1) predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw <- HoltWinters(Xtr, beta = F)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
predHw <- predict(hw, newdata = Xte, prediction.interval = T, level = 0.95)
predHw
predHw <- predict(hw, newdata = Xte, n.ahead = 23 prediction.interval = T, level = 0.95)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr, beta = F)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw <- HoltWinters(Xtr, beta = T)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw <- HoltWinters(Xtr, beta = T, gamma = T)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
HoltWinters
?HoltWinters
hw <- HoltWinters(Xtr, beta = T, gamma = T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw
hw$fitted\
hw$fitted
hw$fitted[,"trend"]
print(hw$fitted[,"trend"]_
print(hw$fitted[,"trend"])
plot(hw$fitted[,"trend"])
plot(hw$fitted[100:,"trend"])
print(hw$fitted[,"trend"])
print(hw$fitted[1953,"trend"])
print(hw$fitted[100,"trend"])
print(hw$fitted[100:200,"trend"])
plot(hw$fitted[100:200,"trend"])
plot(hw$fitted[100:200,"trend"],linetype="l")
plot(hw$fitted[100:200,"trend"],lty="l")
plot(1:100,hw$fitted[100:200,"trend"],lty=2)
plot(0:100,hw$fitted[100:200,"trend"],lty=2)
plot(0:100,hw$fitted[100:200,"trend"],lty=1)
?plot
plot(0:100,hw$fitted[100:200,"trend"],"l")
plot(0:100,hw$fitted[200:300,"trend"],"l")
plot(0:100,hw$fitted[300:400,"trend"],"l")
plot(0:100,hw$fitted[400:500,"trend"],"l")
plot(0:100,hw$fitted[500:600,"trend"],"l")
hw <- HoltWinters(Xtr, beta = T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
?HoltWinters
hw
hw <- HoltWinters(Xtr,beta=T)
hw
hw <- HoltWinters(Xtr)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw$
asdf
predHw
predHw$fit
hw <- HoltWinters(Xtr,beta=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw$fit
predHw
hw <- HoltWinters(Xtr,beta=T,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw
predHw$
asdf
hw <- HoltWinters(Xtr)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr,beta=F)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr,beta=T,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
predHw
hw <- HoltWinters(Xtr,beta=T,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
predHw
hw$fitted
hw
hw$gamma
hw <- HoltWinters(Xtr,beta=1,gamma=1)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw
library(mgcv)
?fit_ps
?dchi
rchisq(1000, 3)
2*rchisq(1000, 3)
sqrt(2*rchisq(1000, 3))
sqrt(2*rchisq(1000000, 3))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(rchisq(1000000, 3)))
mean(sqrt(rchisq(1000000, 3)))
mean(sqrt(rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
std(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 3)))
sd(sqrt(2*rchisq(10000000, 3)))
sd(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 6)))
mean(sqrt(2*rchisq(10000000, 6)))
mean(sqrt(2*rchisq(10000000, 6)))
mean(sqrt(2*rchisq(10000000, 6)))
(0.75 + 1 + 0.75 + 0.9)/4
3.75/4
0.5 + 2 + 0.75 + 0.875
4.125 / 5
4.6666666667 / 5
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
plot <- T # whether to plot results
load_raw <- F # whether to load raw Data from scratch
args = commandArgs(trailingOnly=TRUE)
K <- as.numeric(args[1]) # number of cross-validations (one means just do all the data)
lambda <- as.numeric(args[2]) # lambda for paper
print(K)
print(lambda)
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
# load in coarse data
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
# plot data before fitting model
if(plot & load_raw){
print("plotting data with labels...")
source("src/EDA.R")
}
# create cross-validation groups
source("src/make_test_train.R")
dives
length(dives)
K
K <- 4
lambda <- 1.0
Data
Data_fine
# create cross-validation groups
source("src/make_test_train.R")
print(pos_dives)
neg_dives
dives
train_sets
Data_fine
Data_fine$divenum
# initialize model lists
models_base <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
K <- 1
lambda <- 1.0
print(K)
print(lambda)
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
# load in coarse data
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
# plot data before fitting model
if(plot & load_raw){
print("plotting data with labels...")
source("src/EDA.R")
}
# create cross-validation groups
source("src/make_test_train.R")
print(pos_dives)
# initialize model lists
models_base <- list()
models_PHMM <- list()
probs_PHMM <- list()
probs_base <- list()
AUCs_base <- rep(0,K)
AUCs_PHMM <- rep(0,K)
conf_matrices_base <- list()
conf_matrices_PHMM <- list()
K
k <- 1
print(k)
train_dives <- train_sets[[k]]
test_dives <- test_sets[[k]]
# fit the PHMM
print("fitting PHMM...")
# define states
bhavs <- c("descent","bottom",
"chase","crunch",
"ascent1","ascent2")
N <- length(bhavs)
# set distributions
dist <- list()
if(lambda == -1){
dist[["knownState"]] <- paste0("cat",N+1)
}
dist[["delt_d"]] <- "norm"
#dist[["logHtv"]] <- "norm"
#dist[["logJpNorm"]] <- "norm"
dist[["rajp"]] <- "vm"
dist[["htv"]] <- "gamma"
dist[["jp_normed"]] <- "gamma"
# make the DM matrix (share features for ascending with and without a fish)
DM <- list()
for(feature in names(dist)){
if(feature %in% c("delt_d")){
DM0 <- kronecker(diag(2),
rbind(diag((N-1)),c(rep(0,(N-2)),1)))
} else if (feature == "knownState") {
DM0 <- diag(N^2)
} else if(dist[[feature]] %in% c("norm","gamma")){
DM0 <- kronecker(diag(2),
rbind(c(1,0,0),diag(3),c(1,0,0),c(1,0,0)))
#DM0 <- kronecker(diag(2),
#                 rbind(diag((N-1)),c(rep(0,(N-2)),1)))
} else if (dist[[feature]] == "vm"){
DM0 <- rbind(c(1,0,0),diag(3),c(1,0,0),c(1,0,0))
#DM0 <- rbind(diag((N-1)),c(rep(0,(N-2)),1))
}
DM[[feature]] <- DM0
}
# Set fixed Parameters
fixPar <- list()
eps <- 1e-50
fixPar$delt_d <- c(NA, 0, 0, 0,NA, # means each state
NA,NA,NA,NA,NA) # sds each state
if(lambda == -1){
fixPar$knownState <- c(  -99,-99,-99,-99,-99,-99, # prob desc label, each state
-99,-99,-99,-99,-99,-99, # prob bot label, each state
-99,-99,-99,-99,-99,-99, # prob chase label, each state
-99,-99, NA, NA,-99, NA, # prob capture label, each state
-99,-99,-99,-99, NA,-99, # prob asc 1 label, each state
-99,-99,-99,-99,-99, NA) # prob asc 2 label, each state
}
# fix beta
fixPar$beta <- c(       NA,-1e2,-1e2,  NA,-1e2,  # descent
-1e2,       NA,-1e2,  NA,-1e2,  # bottom
-1e2,  NA,       NA,  NA,-1e2,  # chase
-1e2,-1e2,-1e2,     -1e2, 1e2,  # crunch
-1e2,-1e2,-1e2,-1e2,     -1e2,  # ascent 1
-1e2,-1e2,-1e2,-1e2,-1e2      ) # ascent 2
fixPar$delta <- c(1.0-5*eps,eps,eps,eps,eps,eps)
# set initial parameters
Par0 <- list()
Par0[["delt_d"]] <- c(c(20,  0,   0,  0,-20), # means
log(c(10, 2.0,2.0,2.0,10))) # sds
Par0[["logWLow"]] <- c(c(2, 5, 6), # means
log(c(2, 1, 1))) # sds
Par0[["logWHigh"]] <- c(c(1, 4, 6), # means
log(c(2, 1, 1))) # sds
Par0[["htv"]] <- c(log(c(0.2,0.5,2.0)), # means
log(c(0.1,0.4,0.5))) # sds
Par0[["rajp"]] <- c(log(c(2, 1, 0.1)))  # concentrations
Par0[["logJpNorm"]] <- c(c(1, 1, 2,   4, 1), # means
log(c(1, 1, 1, 0.5, 1))) # sds
Par0[["jp_normed"]] <- c(log(c(3,5,25)), # means
log(c(2,15,5))) # sds
if(lambda == -1){
Par0[["knownState"]] <- c(-99,-99,-99,-99,-99,-99, # prob desc label, each state
-99,-99,-99,-99,-99,-99, # prob bot label, each state
-99,-99,-99,-99,-99,-99, # prob chase label, each state
-99,-99,  0,  0,-99,  0, # prob capture label, each state
-99,-99,-99,-99,  0,-99, # prob asc 1 label, each state
-99,-99,-99,-99,-99,  0) # prob asc 2 label, each state
}
# pick initial beta
beta0  <- c(       -3,-1e2,-1e2,  -3,-1e2,  # descent
-1e2,       -3,-1e2,  -3,-1e2,  # bottom
-1e2,  -3,       -3,  -3,-1e2,  # chase
-1e2,-1e2,-1e2,     -1e2, 1e2,  # crunch
-1e2,-1e2,-1e2,-1e2,     -1e2,  # ascent 1
-1e2,-1e2,-1e2,-1e2,-1e2      ) # ascent 2
beta0 <- matrix(beta0,nrow=1)
# pick initial delta
delta0 <- matrix(c(1.0-5*eps,eps,eps,eps,eps,eps),nrow=1)
# prep data
Data_fine$whale <- Data_fine$ID
Data_fine$ID <- Data_fine$divenum
Data_fine_final <- prepData(Data_fine[Data_fine$divenum %in% c(train_dives,test_dives),],
coordNames=NULL)
window_size <- 10 # seconds- must be multiple of 2
n <- window_size / 2
knownStates <- c()
jps_normed <- c()
htvs <- c()
rajps <- c()
delt_ds <- c()
divenums <- c()
stimes <- c()
ads <- c()
logWLows <- c()
logWHighs <- c()
for(divenum in unique(Data_fine_final$divenum)){
print(divenum)
dive_df <- Data_fine_final[Data_fine_final$divenum %in% divenum,]
if(nrow(dive_df) < 2*n){
next
}
inds <- seq(1, nrow(dive_df)-n, by = n)
for(rownum in inds){
if(rownum == tail(inds,1)){
seg_df <- dive_df[rownum:nrow(dive_df),]
} else {
seg_df <- dive_df[rownum:(rownum+n-1),]
}
if(4 %in% seg_df$knownState){
knownStates <- c(knownStates,4)
} else if (5 %in% seg_df$knownState){
knownStates <- c(knownStates,5)
} else if (6 %in% seg_df$knownState){
knownStates <- c(knownStates,6)
} else {
knownStates <- c(knownStates,NA)
}
max_jp_normed <- max(seg_df$jp_normed,na.rm=T)
jps_normed <- c(jps_normed,max_jp_normed)
jp_ind <- which(seg_df$jp_normed == max_jp_normed)[1]
rajps <- c(rajps,seg_df$rajp[jp_ind])
htvs <- c(htvs,mean(seg_df$htv,na.rm=T))
delt_ds <- c(delt_ds,sum(seg_df$delt_d))
stimes <- c(stimes,seg_df$stime[1])
ads <- c(ads,seg_df$ad[1])
logWLows <- c(logWLows, mean(seg_df$logWLow))
logWHighs <- c(logWHighs, mean(seg_df$logWHigh))
divenums <- c(divenums,divenum)
}
}
Data_less_fine_final <- data.frame(knownState = knownStates,
jp_normed = jps_normed,
htv = htvs,
rajp = rajps,
delt_d = delt_ds,
divenum = divenums,
stime = stimes,
ad = ads,
logWLow = logWLows,
logWHigh = logWHighs)
Data_less_fine_final$ID <- Data_less_fine_final$divenum
Data_less_fine_final <- prepData(Data_less_fine_final,coordNames=NULL)
checkPar0(data=Data_less_fine_final,
nbStates=N,
dist=dist,
DM=DM,
beta0=beta0,
delta0=delta0,
Par0=Par0,
fixPar=fixPar
)
# get knownStates for lambda purposes
knownStates <- Data_less_fine_final$knownState[Data_less_fine_final$ID %in% train_dives]
knownStates[knownStates %in% 7] <- NA
# add category for knownStates Data_fine_final
Data_less_fine_final$knownState[is.na(Data_less_fine_final$knownState)] <- N+1
Data_less_fine_final
Data_less_fine_final$ID
levels(Data_less_fine_final$ID)
dives
Data_less_fine_final$ID
Data_less_fine_final
nrow(Data_less_fine_final)

group.names1 <- c("1" = "Resting",
"2" = "Travelling",
"3" = "Foraging")
group.colors2 <- c("1" = "#F8766D",
"2" = "#B79F00",
"3" = "#00BA38",
"4" = "#00BFC4",
"5" = "#619CFF",
"6" = "#F564E3")
group.names2 <- c("1" = "Resting 1",
"2" = "Resting 2",
"3" = "Travelling 1",
"4" = "Travelling 2",
"5" = "Foraging 1",
"6" = "Foraging 2")
plot0 <- ggplot(Data,
aes(x=diveDuration,
y=maxDepth,
color=as.factor(knownState))) +
geom_point() +
scale_color_manual(labels = group.names1,
values = group.colors1) +
stat_density_2d(color="white") +
geom_hline(yintercept = md_threshs) +
geom_vline(xintercept = dd_threshs) +
scale_x_log10() + scale_y_log10() +
labs(color="Labelled Behaviour",
y="Dive Depth (m)",
x="Dive Duration (s)") +
facet_wrap(~vstates,ncol = 2, labeller = as_labeller(group.names2))
ggsave(paste0("../plt/scatterplot_",model,".png"),
plot = plot0,
width = 8,
height = 8,
device='png',
dpi=500)
print(plot0)
plot1 <- ggplot(Data,
aes(x=avg_w_low,
y=avg_w_high,
color=as.factor(knownState))) +
geom_point() +
scale_color_manual(labels = group.names1,
values = group.colors1) +
stat_density_2d(color="white") +
scale_x_log10() + scale_y_log10() +
labs(color="Labelled Behaviour",
x="W low",
y="W high") +
facet_wrap(~vstates,ncol = 2, labeller = as_labeller(group.names2))
ggsave(paste0("../plt/scatterplot_",model,"_w.png"),
plot = plot1,
width = 8,
height = 8,
device='png',
dpi=500)
print(plot1)
ggplot(Data,
aes(x=diveDuration,
y=avg_w_high,
color=as.factor(knownState))) +
geom_point() +
scale_color_manual(labels = group.names1,
values = group.colors1) +
stat_density_2d(color="white") +
scale_x_log10() + scale_y_log10() +
labs(color="Labelled Behaviour",
x="Dive Duration",
y="W high") +
facet_wrap(~vstates,ncol = 2, labeller = as_labeller(group.names2))
#plot_profiles = TRUE
if(plot_profiles){
# add the dive types to the RawData
dive_types <- data.frame(vstate1    = Data$vstates,
knownState = Data$knownState,
divenum    = Data$divenum)
# load in the rawData
rawData <- data.frame(fread('../../dat/Final_rawDataDown_Beth.csv'))
rawData <- left_join(rawData,dive_types,by="divenum")
rawData$Elevation <- -rawData$p
cols_to_plot <- c("Elevation")
labs <- c(Elevation = "Depth (meters)",
maxDepth = "Maximum Depth (m)",
diveDuration = "Dive Duration (s)",
postDiveInt = "Post Dive Interval (s)")
rawDataDownLong <- rawData %>%
pivot_longer(cols = cols_to_plot,
names_to = "feature")
### plot data
for (whale in unique(Data$ID)){
#sdive = sdive+1
#dives = sdive:(sdive+1)
dives = Data[(Data$ID %in% whale),]$divenum
df <- rawDataDownLong[(rawDataDownLong$divenum %in% dives) &
(rawDataDownLong$segnum != 0),]
df$Time <- (df$Time - min(df$Time))/3600
plot1 <- ggplot(df,aes(x=Time, y=value)) +
geom_line(aes(color=factor(vstate1),
group=divenum)) +
geom_hline(yintercept = 0) +
labs(color="",
y="Dive depth (m)",
x="Elapsed time (hours)") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_color_manual(labels=group.names2,
values=group.colors2) +
theme_classic() +
theme(strip.background = element_blank(),
strip.placement = "outside",
legend.position=c(.1,.3),
legend.justification = "left",
text = element_text(size=16)) +
guides(colour = guide_legend(override.aes = list(linewidth=3)))
ggsave(paste0("../plt/profile_",whale,"_single.png"),
plot = plot1,
width = 8,
height = 8,
device='png',
dpi=500)
print(plot1)
}
}
library(momentuHMM)
library(circular)
library(CircStats)
library(runner)
library(ggplot2)
library(tidyr)
library(dplyr)
library(mclust)
library(mixreg)
library(readxl)
library(diveMove)
library(boot)
library(data.table)
library(party)
library(numDeriv)
library(data.tree)
### Select Model ###
model <- "no_labels"
#model <- "fixed_labels"
#model <- "random_labels"
#model <- "preferential_labels"
### Select Sex ###
sex = "Female"
#sex = "Male"
### set random seed ###
rand_seed <- 1
set.seed(rand_seed)
### hold out any whales? ###
holdout_whale <- "None"
#holdout_whale <- "I145"
### Label Dive Types ###
md_threshs <- c(0,5,10,30,50,Inf)
dd_threshs <- c(0,5,10,20,40,Inf)
# select number of states
N <- 6
plot_profiles <- TRUE
### BEGIN COMPUTATION ###
### Load Data ###
setwd("~/Documents/Research/PHMM/src")
# load data
Data <- data.frame(fread('../../dat/Final_Data_Beth.csv'))
ethogram <- data.frame(fread('../../dat/Final_ethogram_Beth.csv'))
### add sex to Data ###
Data$Sex <- "Female"
#Data[Data$ID %in% c("I107","D21","L87","L88"),"Sex"]  <- "Male"
Data$Sex <- factor(Data$Sex)
Data <- Data[Data$Sex == sex,]
# do preprocessing
Data$postDiveInt <- exp(Data$postDiveInt) + runif(nrow(Data))/2
Data$maxDepth <- exp(Data$maxDepth)
Data$maxDepth[Data$ID == "D21"] <- Data$maxDepth[Data$ID == "D21"] + 0.5
Data$diveDuration <- exp(Data$diveDuration) + runif(nrow(Data))/2
Data$logMaxDepth <- log(Data$maxDepth)
Data$logDiveDuration <- log(Data$diveDuration)
Data$logWLow <- log(Data$avg_w_low)
Data$logWHigh <- log(Data$avg_w_high)
Data$logMDDD.x <- Data$logMaxDepth
Data$logMDDD.y <- Data$logDiveDuration
Data$logW.x <- Data$logWLow
Data$logW.y <- Data$logWHigh
# get rid of dives less than 20 seconds long
Data <- Data[Data$diveDuration >= 20,]
### add labels ###
Data$knownState <- NA
Data$knownState[Data$diveType %in% "Resting"] <- 1
Data$knownState[Data$diveType %in% "Travelling"] <- 2
Data$knownState[Data$diveType %in% "Foraging"] <- 3
Data$knownState[is.na(Data$knownState)] <- 4
Data$knownState <- as.factor(Data$knownState)
Data$maxDepthCat <- NA
for(i in 1:(length(md_threshs)-1)){
Data$maxDepthCat[(Data$maxDepth > md_threshs[i]) &
(Data$maxDepth <= md_threshs[i+1])] <- i
}
Data$maxDepthCat <- as.factor(Data$maxDepthCat)
Data$diveDurationCat <- NA
for(i in 1:(length(dd_threshs)-1)){
Data$diveDurationCat[(Data$diveDuration > dd_threshs[i]) &
(Data$diveDuration <= dd_threshs[i+1])] <- i
}
Data$diveDurationCat <- as.factor(Data$diveDurationCat)
### Set distributions ###
dist <- list(#logMDDD    = "mvnorm2",
logW       = "mvnorm2")
if(model %in% c("fixed_labels","random_labels","preferential_labels")){
dist$knownState = paste0("cat",nlevels(Data$knownState))
}
# add covariates
if(model %in% c("fixed_labels","random_labels")){
knownStateDM=matrix(c(1,0,1,0, # prob resting label, in resting
0,1,0,1, # prob resting label, in travelling
0,1,0,1, # prob resting label, in foraging
0,1,0,1, # prob travelling label, in resting
1,0,1,0, # prob travelling label, in travelling
0,1,0,1, # prob travelling label, in foraging
0,1,0,1, # prob foraging label, in resting
0,1,0,1, # prob foraging label, in travelling
1,0,1,0), # prob foraging label, in foraging
18,2,byrow=TRUE)
DM <- list(knownState = knownStateDM)
}
if(model == "preferential_labels"){
knownStateDM=matrix(c(1,0,"diveDuration", # prob resting label, in resting 1
1,0,"diveDuration", # prob resting label, in resting 2
0,1,"diveDuration", # prob resting label, in travelling 1
0,1,"diveDuration", # prob resting label, in travelling 2
0,1,"diveDuration", # prob resting label, in foraging 1
0,1,"diveDuration", # prob resting label, in foraging 2
0,1,"diveDuration", # prob travelling label, in resting 1
0,1,"diveDuration", # prob travelling label, in resting 2
1,0,"diveDuration", # prob travelling label, in travelling 1
1,0,"diveDuration", # prob travelling label, in travelling 2
0,1,"diveDuration", # prob travelling label, in foraging 1
0,1,"diveDuration", # prob travelling label, in foraging 2
0,1,"diveDuration", # prob foraging label, in resting 1
0,1,"diveDuration", # prob foraging label, in resting 2
0,1,"diveDuration", # prob foraging label, in travelling 1
0,1,"diveDuration", # prob foraging label, in travelling 2
1,0,"diveDuration", # prob foraging label, in foraging 1
1,0,"diveDuration"), # prob foraging label, in foraging 2
18,3,byrow=TRUE)
DM <- list(knownState = knownStateDM)
}
# Set fixed Parameters
if(model == "fixed_labels"){
fixPar <- list(knownState = c(0,-100))
}
# Set initial Parameters
get_norm_par <- function(N,feature,Data){
pars <- matrix(rep(NA,2*N), nrow = N)
sData <- Data[Data$maxDepth <= 10,]
dData <- Data[Data$maxDepth > 10,]
for(i in 1:(N/2)){
if(sum(sData$knownState %in% i) < 2){
pars[2*i-1,1] <- mean(sData[,feature])
pars[2*i-1,2] <- sd(sData[,feature])
pars[2*i,1] <- mean(dData[,feature])
pars[2*i,2] <- sd(dData[,feature])
} else {
pars[2*i-1,1] <- mean(sData[sData$knownState %in% i,feature])
pars[2*i-1,2] <- sd(sData[sData$knownState %in% i,feature])
pars[2*i,1] <- mean(dData[dData$knownState %in% i,feature])
pars[2*i,2] <- sd(dData[dData$knownState %in% i,feature])
}
}
return(pars)
}
get_mvnorm_par <- function(N,feature,Data){
pars <- matrix(rep(NA,5*N), nrow = N)
sData <- Data[Data$maxDepth <= 10,]
dData <- Data[Data$maxDepth > 10,]
for(i in 1:(N/2)){
if(sum(sData$knownState %in% i) < 2){
pars[2*i-1,1] <- mean(sData[,paste0(feature,".x")]) # mean x
pars[2*i-1,2] <- mean(sData[,paste0(feature,".y")]) # mean y
pars[2*i-1,3] <- sd(  sData[,paste0(feature,".x")]) # sd x
pars[2*i-1,4] <- 0.0 # corr xy
pars[2*i-1,5] <- sd(  sData[,paste0(feature,".y")]) # sd x
pars[2*i  ,1] <- mean(dData[,paste0(feature,".x")]) # mean x
pars[2*i  ,2] <- mean(dData[,paste0(feature,".y")]) # mean y
pars[2*i  ,3] <- sd(  dData[,paste0(feature,".x")]) # sd x
pars[2*i  ,4] <- 0.0 # corr xy
pars[2*i  ,5] <- sd(  dData[,paste0(feature,".y")]) # sd x
} else {
pars[2*i-1,1] <- mean(sData[sData$knownState %in% i,paste0(feature,".x")]) # mean x
pars[2*i-1,2] <- mean(sData[sData$knownState %in% i,paste0(feature,".y")]) # mean y
pars[2*i-1,3] <- sd(  sData[sData$knownState %in% i,paste0(feature,".x")]) # sd x
pars[2*i-1,4] <- 0.0 # corr xy
pars[2*i-1,5] <- sd(  sData[sData$knownState %in% i,paste0(feature,".y")]) # sd x
pars[2*i  ,1] <- mean(dData[dData$knownState %in% i,paste0(feature,".x")]) # mean x
pars[2*i  ,2] <- mean(dData[dData$knownState %in% i,paste0(feature,".y")]) # mean y
pars[2*i  ,3] <- sd(  dData[dData$knownState %in% i,paste0(feature,".x")]) # sd x
pars[2*i  ,4] <- 0.0 # corr xy
pars[2*i  ,5] <- sd(  dData[dData$knownState %in% i,paste0(feature,".y")]) # sd x
}
}
return(pars)
}
Par0 <- list(logMDDD     = get_mvnorm_par(N,"logMDDD",Data),
logW        = get_mvnorm_par(N,"logW",Data))
#Par0 <- list(logMDDD = get_mvnorm_par(N,"logMDDD",Data),
#             logW    = get_mvnorm_par(N,"logW",Data))
if(model %in% c("fixed_labels")){
Par0$knownState = fixPar$knownState
}
if(model %in% c("random_labels")){
ps <- logit(c(0.1,0.001))
Par0$knownState = ps
}
if(model == "preferential_labels"){
ps <- c(0.1,0.001,0.0)
Par0$knownState = ps
}
# Set initial TPM
beta0 <- matrix(rep(-5.0,N*(N-1)),nrow=1)
# prep data
Data <- prepData(Data,coordNames=NULL)
# fit HMM
if(model == "fixed_labels"){
checkPar0(data=Data,
nbStates=N,
dist=dist,
DM=DM,
fixPar=fixPar,
beta0=beta0,
Par0=Par0)
hmm <- fitHMM(data=Data,
nbStates=N,
dist=dist,
DM=DM,
fixPar=fixPar,
beta0=beta0,
Par0=Par0,
nlmPar = list('print.level'=2,
'iterlim'=10000))
} else if (model == "random_labels"){
checkPar0(data=Data,
nbStates=N,
dist=dist,
DM=DM,
beta0=beta0,
Par0=Par0)
hmm <- fitHMM(data=Data,
nbStates=N,
dist=dist,
DM=DM,
beta0=beta0,
Par0=Par0,
nlmPar = list('print.level'=2,
'iterlim'=10000))
} else if (model == "preferential_labels"){
checkPar0(data=Data,
nbStates=N,
dist=dist,
DM=DM,
beta0=beta0,
Par0=Par0)
hmm <- fitHMM(data=Data,
nbStates=N,
dist=dist,
DM=DM,
beta0=beta0,
Par0=Par0,
nlmPar = list('print.level'=2,
'iterlim'=10000))
} else {
checkPar0(data=Data,
nbStates=N,
dist=dist,
beta0=beta0,
Par0=Par0)
hmm <- fitHMM(data=Data,
nbStates=N,
dist=dist,
beta0=beta0,
Par0=Par0,
nlmPar = list('print.level'=2,
'iterlim'=10000))
}
hmm
Data$vstates <- viterbi(hmm)
Data$knownState <- as.factor(Data$knownState)
# Plot Data
group.colors1 <- c("1" = "#F8766D",
"2" = "#00BA38",
"3" = "#619CFF")
group.names1 <- c("1" = "Resting",
"2" = "Travelling",
"3" = "Foraging")
group.colors2 <- c("1" = "#F8766D",
"2" = "#B79F00",
"3" = "#00BA38",
"4" = "#00BFC4",
"5" = "#619CFF",
"6" = "#F564E3")
group.names2 <- c("1" = "Resting 1",
"2" = "Resting 2",
"3" = "Travelling 1",
"4" = "Travelling 2",
"5" = "Foraging 1",
"6" = "Foraging 2")
plot0 <- ggplot(Data,
aes(x=diveDuration,
y=maxDepth,
color=as.factor(knownState))) +
geom_point() +
scale_color_manual(labels = group.names1,
values = group.colors1) +
stat_density_2d(color="white") +
geom_hline(yintercept = md_threshs) +
geom_vline(xintercept = dd_threshs) +
scale_x_log10() + scale_y_log10() +
labs(color="Labelled Behaviour",
y="Dive Depth (m)",
x="Dive Duration (s)") +
facet_wrap(~vstates,ncol = 2, labeller = as_labeller(group.names2))
ggsave(paste0("../plt/scatterplot_",model,".png"),
plot = plot0,
width = 8,
height = 8,
device='png',
dpi=500)
print(plot0)
plot1 <- ggplot(Data,
aes(x=avg_w_low,
y=avg_w_high,
color=as.factor(knownState))) +
geom_point() +
scale_color_manual(labels = group.names1,
values = group.colors1) +
stat_density_2d(color="white") +
scale_x_log10() + scale_y_log10() +
labs(color="Labelled Behaviour",
x="W low",
y="W high") +
facet_wrap(~vstates,ncol = 2, labeller = as_labeller(group.names2))
ggsave(paste0("../plt/scatterplot_",model,"_w.png"),
plot = plot1,
width = 8,
height = 8,
device='png',
dpi=500)
print(plot1)
ggplot(Data,
aes(x=diveDuration,
y=avg_w_high,
color=as.factor(knownState))) +
geom_point() +
scale_color_manual(labels = group.names1,
values = group.colors1) +
stat_density_2d(color="white") +
scale_x_log10() + scale_y_log10() +
labs(color="Labelled Behaviour",
x="Dive Duration",
y="W high") +
facet_wrap(~vstates,ncol = 2, labeller = as_labeller(group.names2))
#plot_profiles = TRUE
if(plot_profiles){
# add the dive types to the RawData
dive_types <- data.frame(vstate1    = Data$vstates,
knownState = Data$knownState,
divenum    = Data$divenum)
# load in the rawData
rawData <- data.frame(fread('../../dat/Final_rawDataDown_Beth.csv'))
rawData <- left_join(rawData,dive_types,by="divenum")
rawData$Elevation <- -rawData$p
cols_to_plot <- c("Elevation")
labs <- c(Elevation = "Depth (meters)",
maxDepth = "Maximum Depth (m)",
diveDuration = "Dive Duration (s)",
postDiveInt = "Post Dive Interval (s)")
rawDataDownLong <- rawData %>%
pivot_longer(cols = cols_to_plot,
names_to = "feature")
### plot data
for (whale in unique(Data$ID)){
#sdive = sdive+1
#dives = sdive:(sdive+1)
dives = Data[(Data$ID %in% whale),]$divenum
df <- rawDataDownLong[(rawDataDownLong$divenum %in% dives) &
(rawDataDownLong$segnum != 0),]
df$Time <- (df$Time - min(df$Time))/3600
plot1 <- ggplot(df,aes(x=Time, y=value)) +
geom_line(aes(color=factor(vstate1),
group=divenum)) +
geom_hline(yintercept = 0) +
labs(color="",
y="Dive depth (m)",
x="Elapsed time (hours)") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_color_manual(labels=group.names2,
values=group.colors2) +
theme_classic() +
theme(strip.background = element_blank(),
strip.placement = "outside",
legend.position=c(.1,.3),
legend.justification = "left",
text = element_text(size=16)) +
guides(colour = guide_legend(override.aes = list(linewidth=3)))
ggsave(paste0("../plt/profile_",whale,"_single.png"),
plot = plot1,
width = 8,
height = 8,
device='png',
dpi=500)
print(plot1)
}
}

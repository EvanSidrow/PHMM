valid <- F
while(!valid){
alpha1 <- runif(1, min=0.05, max=1.95)
alpha1 <- round(alpha1, 2)
alpha2 <- runif(1, min=-0.95, max=1-alpha1)
alpha2 <- round(alpha2, 2)
if((alpha1 != round(1.00 - alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
valid <- T
}
}
alpha1
alpha2
for(i in 1:1000){
valid <- F
while(!valid){
alpha1 <- runif(1, min=0.05, max=1.95)
alpha1 <- round(alpha1, 2)
alpha2 <- runif(1, min=-0.95, max=1-alpha1)
alpha2 <- round(alpha2, 2)
if((alpha1 != round(1.00-alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
valid <- T
}
}
}
for(i in 1:10000){
valid <- F
while(!valid){
alpha1 <- runif(1, min=0.05, max=1.95)
alpha1 <- round(alpha1, 2)
alpha2 <- runif(1, min=-0.95, max=1-alpha1)
alpha2 <- round(alpha2, 2)
if((alpha1 != round(1.00-alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
valid <- T
}
}
}
for(i in 1:10000){
valid <- F
while(!valid){
alpha1 <- runif(1, min=0.05, max=1.95)
alpha1 <- round(alpha1, 2)
alpha2 <- runif(1, min=-0.95, max=1-alpha1)
alpha2 <- round(alpha2, 2)
if((alpha1 != round(1.00-alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
valid <- T
} else {
print("hi")
}
}
}
for(i in 1:10000){
for(trynum in 1:10){
alpha1 <- runif(1, min=0.05, max=1.95)
alpha1 <- round(alpha1, 2)
alpha2 <- runif(1, min=-0.95, max=1-alpha1)
alpha2 <- round(alpha2, 2)
if((alpha1 != round(1.00-alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
break
}
}
}
alpha1
alpha2
for(i in 1:10000){
for(trynum in 1:10){
alpha1 <- runif(1, min=0.05, max=1.95)
alpha1 <- round(alpha1, 2)
alpha2 <- runif(1, min=-0.95, max=1-alpha1)
alpha2 <- round(alpha2, 2)
if((alpha1 != round(1.00-alpha2,2)) &
(alpha1 != round(alpha2,2)) &
(alpha1 != round(2.00-alpha2,2)) &
(alpha1 != round(2.00+alpha2,2))){
break
} else {
print("hi")
}
}
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
df <- read.csv("NINO34.csv")
df <- df %>% pivot_longer(!Year,
names_to = "month",
values_to = "ENI")
df <- df[!is.na(df$ENI),]
X <- ts(df$ENI, start = c(1870,1), frequency = 12)
Xtr <- window(X, start=c(1870,1), end=c(2021,12), frequency = 12)
Xte <- window(X, start=c(2022,1), end=c(2023,11), frequency = 12)
plot(Xtr,
main = "Monthly Average Sea Surface Temperatures",
xlab = "Year",
ylab = "Temperature (degrees C)")
acf(Xtr, lag.max = 12*10, main = "", xlab = "Lag (years)")
pacf(Xtr, lag.max = 12*10, main = "", xlab = "Lag (years)")
Xtr.stl <- stl(Xtr,s.window = "periodic")
Xtr.ds <- Xtr - Xtr.stl$time.series[,"seasonal"]
plot(Xtr.ds,
main = "Monthly Average Sea Surface Temperatures, de-Seasonalized",
xlab = "Year",
ylab = "Temperature Deviation (degrees C)")
acf(Xtr.ds, lag.max = 10*12)
pacf(Xtr.ds, lag.max = 10*12)
fm1 <- arima(Xtr.ds,order = c(1,0,0))
fm6 <- arima(Xtr.ds,order = c(6,0,0))
print(fm1)
print(fm6)
print(paste("AIC for AR(1):",AIC(fm1)))
print(paste("AIC for AR(6):",AIC(fm6)))
tsdiag(fm1)
tsdiag(fm6)
pred1 <- predict(fm1,23)
pred1$pred <- pred1$pred + Xtr.stl$time.series[,"seasonal"][1:23]
print(paste("MSPE for the AR(1) process:", mean((Xte - pred1$pred)^2)))
pred6 <- predict(fm6,23)
pred6$pred <- pred6$pred + Xtr.stl$time.series[,"seasonal"][1:23]
print(paste("MSPE for the AR(6) process:", mean((Xte - pred6$pred)^2)))
lb1 <- pred1$pred - 1.96*pred1$se
ub1 <- pred1$pred + 1.96*pred1$se
lb6 <- pred6$pred - 1.96*pred6$se
ub6 <- pred6$pred + 1.96*pred6$se
# plot models
plot(Xte,
ylim = c(24,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR model predictions")
lines(pred1$pred,col="red")
lines(lb1,lty = 2, col = "red")
lines(ub1,lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "AR(1) predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw <- HoltWinters(Xtr, beta = F)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
predHw <- predict(hw, newdata = Xte, prediction.interval = T, level = 0.95)
predHw
predHw <- predict(hw, newdata = Xte, n.ahead = 23 prediction.interval = T, level = 0.95)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr, beta = F)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw <- HoltWinters(Xtr, beta = T)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw <- HoltWinters(Xtr, beta = T, gamma = T)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
HoltWinters
?HoltWinters
hw <- HoltWinters(Xtr, beta = T, gamma = T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw
hw$fitted\
hw$fitted
hw$fitted[,"trend"]
print(hw$fitted[,"trend"]_
print(hw$fitted[,"trend"])
plot(hw$fitted[,"trend"])
plot(hw$fitted[100:,"trend"])
print(hw$fitted[,"trend"])
print(hw$fitted[1953,"trend"])
print(hw$fitted[100,"trend"])
print(hw$fitted[100:200,"trend"])
plot(hw$fitted[100:200,"trend"])
plot(hw$fitted[100:200,"trend"],linetype="l")
plot(hw$fitted[100:200,"trend"],lty="l")
plot(1:100,hw$fitted[100:200,"trend"],lty=2)
plot(0:100,hw$fitted[100:200,"trend"],lty=2)
plot(0:100,hw$fitted[100:200,"trend"],lty=1)
?plot
plot(0:100,hw$fitted[100:200,"trend"],"l")
plot(0:100,hw$fitted[200:300,"trend"],"l")
plot(0:100,hw$fitted[300:400,"trend"],"l")
plot(0:100,hw$fitted[400:500,"trend"],"l")
plot(0:100,hw$fitted[500:600,"trend"],"l")
hw <- HoltWinters(Xtr, beta = T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
?HoltWinters
hw
hw <- HoltWinters(Xtr,beta=T)
hw
hw <- HoltWinters(Xtr)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw$
asdf
predHw
predHw$fit
hw <- HoltWinters(Xtr,beta=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw$fit
predHw
hw <- HoltWinters(Xtr,beta=T,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw
predHw$
asdf
hw <- HoltWinters(Xtr)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr,beta=F)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr,beta=T,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
predHw
hw <- HoltWinters(Xtr,beta=T,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
predHw
hw$fitted
hw
hw$gamma
hw <- HoltWinters(Xtr,beta=1,gamma=1)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw
library(mgcv)
?fit_ps
?dchi
rchisq(1000, 3)
2*rchisq(1000, 3)
sqrt(2*rchisq(1000, 3))
sqrt(2*rchisq(1000000, 3))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(rchisq(1000000, 3)))
mean(sqrt(rchisq(1000000, 3)))
mean(sqrt(rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
std(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 3)))
sd(sqrt(2*rchisq(10000000, 3)))
sd(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 6)))
mean(sqrt(2*rchisq(10000000, 6)))
mean(sqrt(2*rchisq(10000000, 6)))
mean(sqrt(2*rchisq(10000000, 6)))
library(momentuHMM)
library(dplyr)
library(mclust)
library(data.table)
library(ggplot2)
library(latex2exp)
library(pROC)
#setwd("/Users/evsi8432/Documents/Research/PHMM/src/bash")
# get command-line arguments
args <- commandArgs(trailingOnly=TRUE)
args <- c("logMDDD_1-1-1_dd-30_2023-10-23.R",NA)
opt_file <- args[1]
args <- as.integer(args[2])
# get options
source(paste0('../opt/',opt_file))
getwd()
library(momentuHMM)
library(dplyr)
library(mclust)
library(data.table)
library(ggplot2)
library(latex2exp)
library(pROC)
setwd("/Users/evsi8432/Documents/Research/PHMM/src/bash")
# get command-line arguments
args <- commandArgs(trailingOnly=TRUE)
args <- c("logMDDD_1-1-1_dd-30_2023-10-23.R",NA)
opt_file <- args[1]
args <- as.integer(args[2])
# get options
source(paste0('../opt/',opt_file))
# Set Seed
set.seed(1)
# define models
source("../preprocessing/load_data.R")
ratio <- sum(!(Data$knownState %in% 4)) / nrow(Data)
ratio <- round(ratio,3)
models <- list()
#models[[1]] <- c("no",     1.0)
#models[[2]] <- c("random", 1.0)
models[[1]] <- c("fixed",  0.0)       # no weight
models[[2]] <- c("fixed",  0.5*ratio)
models[[3]] <- c("fixed",  ratio)     # equal weight
models[[4]] <- c("fixed",  0.5 + 0.5*ratio)
models[[5]] <- c("fixed",  1.0)       # natural weight
n_models <- length(models)
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
make_title <- function(start,end){
title <- paste0(start,statesPerBehaviour[1])
for(nstates in statesPerBehaviour[2:3]){
title <- paste0(title,"-",nstates)
}
for(feature in names(dist)){
title <- paste0(title,"-",feature)
}
if(length(sex) > 1){
title <- paste0(title,"_all")
} else {
title <- paste0(title,"_",sex)
}
title <- paste0(title,"_",end)
return(title)
}
whales <- c("none","A100a","A100b","A113a","A113b",
"D21a","D21b","D26a","D26b",
"I107a","I107b","I129","I145a","I145b",
"L87","L88","R48a","R48b","R58a","R58b")
whales <- c()
if("Male" %in% sex){
whales <- c(whales,"D21a","D21b","I107a","I107b","L87","L88")
}
if("Female" %in% sex) {
whales <- c(whales,"A100a","A100b","A113a","A113b","D26a","D26b",
"I129","I145a","I145b","R48a","R48b","R58a","R58b")
}
# get metrics from all models
df <- data.frame(model = c(),
behaviour = c(),
metric = c(),
value = c())
for(model in models){
# extract model and lambda
lamb <- model[2]
model <- model[1]
# get conf matrix for each whale
conf_matrix <- matrix(rep(0,3*3),nrow=3,ncol=3)
# get foraging ROC values
df_ROC_model <- data.frame(prob_resting = c(),
prob_travelling = c(),
prob_foraging = c(),
knownState = c())
for(holdout_whale in whales){
conf_matrix_whale <- read.csv(make_title(paste0(directory,"/params/"),
paste0(model,"-",
lamb,"-",
holdout_whale,"-",
"confusion_matrix.csv")))
conf_matrix <- conf_matrix + conf_matrix_whale[1:3,2:4]
df_ROC_model_whale <- data.frame(fread(make_title(paste0(directory,"/params/"),
paste0(model,"-",
lamb,"-",
holdout_whale,"-",
"probs_labs.csv"))))[,-1]
if(df_ROC_model_whale[1,1] != "prob_resting"){
df_ROC_model <- rbind(df_ROC_model,df_ROC_model_whale)
}
}
# make model confusion matrix
rownames(conf_matrix) <- c("True Resting", "True Travelling", "True Foraging")
colnames(conf_matrix) <- c("Predicted Resting", "Predicted Travelling", "Predicted Foraging")
write.csv(conf_matrix,make_title(paste0(directory,"/params/"),
paste0(model,"-",
lamb,"-",
"confusion_matrix_all.csv")))
# make sensitivity specificity and ROC dataframe
se_r <- sum(conf_matrix[ 1, 1]) / sum(conf_matrix[ 1,])
sp_r <- sum(conf_matrix[-1,-1]) / sum(conf_matrix[-1,])
se_t <- sum(conf_matrix[ 2, 2]) / sum(conf_matrix[ 2,])
sp_t <- sum(conf_matrix[-2,-2]) / sum(conf_matrix[-2,])
se_f <- sum(conf_matrix[ 3, 3]) / sum(conf_matrix[ 3,])
sp_f <- sum(conf_matrix[-3,-3]) / sum(conf_matrix[-3,])
ROC_r = roc(response  = df_ROC_model$knownState %in% 1,
predictor = df_ROC_model$prob_resting,
direction = "<")$auc
ROC_t = roc(response  = df_ROC_model$knownState %in% 2,
predictor = df_ROC_model$prob_travelling,
direction = "<")$auc
ROC_f = roc(response  = df_ROC_model$knownState %in% 3,
predictor = df_ROC_model$prob_foraging,
direction = "<")$auc
df_model <- data.frame(model = rep(lamb,9),
behaviour = rep(c("Resting","Travelling","Foraging"),each=3),
metric = rep(c("Sensitivity","Specificity","AUC"),3),
value = c(se_r,sp_r,ROC_r,se_t,sp_t,ROC_t,se_f,sp_f,ROC_f))
df <- rbind(df,df_model)
}
plot0 <- ggplot(df,#[df$model %in% c("0","0.049","1"),],
aes(x=behaviour,
y=value,
fill=model)) +
geom_col(position="dodge") +
scale_fill_grey(start = 0.8, end = 0.2) +#brewer(palette="Set2") +
labs(x = "Dive Type",
y = "",
fill = TeX("$\\alpha$")) +
facet_wrap(~metric,ncol=1,scales = "free")
ggsave(make_title(paste0(directory,"/plt/"),
"model_comparison.png"),
plot = plot0,
width = 4,
height = 4,
device='png',
dpi=500)
directory

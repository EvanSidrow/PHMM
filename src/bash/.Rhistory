predHw <- predict(hw, newdata = Xte, n.ahead = 23 prediction.interval = T, level = 0.95)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr, beta = F)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw <- HoltWinters(Xtr, beta = T)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw <- HoltWinters(Xtr, beta = T, gamma = T)
predHw <- predict(hw, newdata = Xte, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
HoltWinters
?HoltWinters
hw <- HoltWinters(Xtr, beta = T, gamma = T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
# plot models
plot(Xte,
ylim = c(22,30),
xlab = "Year",
ylab = "Sea Surface Temperature (degrees C)",
main = "AR vs Holt-Winters model predictions")
lines(predHw[,"fit"],col="red")
lines(predHw[,"lwr"],lty = 2, col = "red")
lines(predHw[,"upr"],lty = 2, col = "red")
lines(pred6$pred,col="blue")
lines(lb6,lty = 2, col = "blue")
lines(ub6,lty = 2, col = "blue")
legend(x = "topleft",
legend = c("Test Data", "Holt-Winters predictions", "AR(6) predictions"),
lty = c(1,1,1),
col = c("black","red","blue"))
hw
hw$fitted\
hw$fitted
hw$fitted[,"trend"]
print(hw$fitted[,"trend"]_
print(hw$fitted[,"trend"])
plot(hw$fitted[,"trend"])
plot(hw$fitted[100:,"trend"])
print(hw$fitted[,"trend"])
print(hw$fitted[1953,"trend"])
print(hw$fitted[100,"trend"])
print(hw$fitted[100:200,"trend"])
plot(hw$fitted[100:200,"trend"])
plot(hw$fitted[100:200,"trend"],linetype="l")
plot(hw$fitted[100:200,"trend"],lty="l")
plot(1:100,hw$fitted[100:200,"trend"],lty=2)
plot(0:100,hw$fitted[100:200,"trend"],lty=2)
plot(0:100,hw$fitted[100:200,"trend"],lty=1)
?plot
plot(0:100,hw$fitted[100:200,"trend"],"l")
plot(0:100,hw$fitted[200:300,"trend"],"l")
plot(0:100,hw$fitted[300:400,"trend"],"l")
plot(0:100,hw$fitted[400:500,"trend"],"l")
plot(0:100,hw$fitted[500:600,"trend"],"l")
hw <- HoltWinters(Xtr, beta = T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
?HoltWinters
hw
hw <- HoltWinters(Xtr,beta=T)
hw
hw <- HoltWinters(Xtr)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw$
asdf
predHw
predHw$fit
hw <- HoltWinters(Xtr,beta=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw$fit
predHw
hw <- HoltWinters(Xtr,beta=T,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
predHw
predHw$
asdf
hw <- HoltWinters(Xtr)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr,beta=F)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr,beta=T,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw <- HoltWinters(Xtr,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
predHw
hw <- HoltWinters(Xtr,beta=T,gamma=T)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
predHw
hw$fitted
hw
hw$gamma
hw <- HoltWinters(Xtr,beta=1,gamma=1)
predHw <- predict(hw, n.ahead = 23, prediction.interval = T, level = 0.95)
print(mean((Xte - predHw[,"fit"])^2))
hw
library(mgcv)
?fit_ps
?dchi
rchisq(1000, 3)
2*rchisq(1000, 3)
sqrt(2*rchisq(1000, 3))
sqrt(2*rchisq(1000000, 3))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(rchisq(1000000, 3)))
mean(sqrt(rchisq(1000000, 3)))
mean(sqrt(rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
mean(sqrt(2*rchisq(1000000, 3)))
std(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 3)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(1000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 6)))
sd(sqrt(2*rchisq(10000000, 3)))
sd(sqrt(2*rchisq(10000000, 3)))
sd(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 3)))
mean(sqrt(2*rchisq(10000000, 6)))
mean(sqrt(2*rchisq(10000000, 6)))
mean(sqrt(2*rchisq(10000000, 6)))
mean(sqrt(2*rchisq(10000000, 6)))
#.rs.restartR()
library(Rcpp)
library(tools)
#compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
#package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
#install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
#                 repos=NULL,
#                 type="source")
#library(momentuHMM)
#detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(GGally)
library(signal)
library(oce)
library(pROC)
directory <- "/Users/evsi8432/Documents/Research/PHMM/case_study_2"
setwd(directory)
# set options
plot <- T # whether to plot results
load_raw <- F # whether to load raw Data from scratch
args = commandArgs(trailingOnly=TRUE)
K <- as.numeric(args[1]) # number of cross-validations (one means just do all the data)
lambda <- as.numeric(args[2]) # lambda for paper
#K <- 1
#lambda <- 1.0
print(K)
print(lambda)
# create directories
dir.create(directory, showWarnings = FALSE)
dir.create(paste0(directory,"/params"), showWarnings = FALSE)
dir.create(paste0(directory,"/plt"), showWarnings = FALSE)
# set seed
set.seed(1)
# load in data
if(load_raw){
print("loading fine scale data...")
source("src/load_data_fine.R") # load in Data_fine
} else {
Data_fine <- data.frame(fread("../../dat/Final_Data_fine1.csv"))
}
# load in coarse data
print("loading coarse scale data...")
source("src/load_data_coarse.R") # load in Data
print("labeling dives and prey captures...")
source("src/label_data.R") # label dives, foraging events
# plot data before fitting model
if(plot & load_raw){
print("plotting data with labels...")
source("src/EDA.R")
}
# create cross-validation groups
source("src/make_test_train.R")
#.rs.restartR()
library(Rcpp)
library(tools)
compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
repos=NULL,
type="source")
library(momentuHMM)
detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(mclust)
library(data.table)
library(RcppHungarian)
library(mvtnorm)
setwd("/Users/evsi8432/Documents/Research/PHMM/src/bash")
# get command-line arguments
args <- commandArgs(trailingOnly=TRUE)
args <- c("logMDDD_1-1-1_dd-30_2023-10-23.R",NA)
opt_file <- args[1]
args <- as.integer(args[2])
# get options
source(paste0('../opt/',opt_file))
# do the hierarchical thing
if(hier){
source("../HHMM/fit_model_PHHMM.R")
quit()
}
# define whales
whales <- c("none","A100a","A100b","A113a","A113b",
"D21a","D21b","D26a","D26b",
"I107a","I107b","I129","I145a","I145b",
"L87","L88","R48a","R48b","R58a","R58b")
n_whales <- length(whales)
# define models
source("../preprocessing/load_data.R")
ratio <- sum(!(Data$knownState %in% 4)) / nrow(Data)
ratio <- round(ratio,3)
models <- list()
models[[1]] <- c("no",     1.0)
models[[2]] <- c("random", 1.0)
models[[3]] <- c("fixed",  0.0)       # no weight
models[[4]] <- c("fixed",  0.5*ratio)
models[[5]] <- c("fixed",  ratio)     # equal weight
models[[6]] <- c("fixed",  0.5 + 0.5*ratio)
models[[7]] <- c("fixed",  1.0)       # natural weight
n_models <- length(models)
sind <- 0
if(is.na(args)){
args_list <- sind:(n_retries*n_whales*n_models-1)
} else {
args_list <- c(args)
}
for(args in args_list){
# Set Model
model_ind <- (floor(args[1]) %% n_models) + 1
model <- models[[model_ind]][1]
lamb  <- as.numeric(models[[model_ind]][2])
# Select Holdout Whale
whale_ind <- (floor(args[1] / n_models) %% n_whales) + 1
holdout_whale <- whales[whale_ind]
# Select Seed
rand_seed <- (floor(args[1] / (n_models*n_whales)) %% n_retries) + 1
set.seed(rand_seed)
print(rand_seed)
print(holdout_whale)
print(model)
print(lamb)
# check if we already have a model
make_title <- function(start,end){
title <- paste0(start,statesPerBehaviour[1])
for(nstates in statesPerBehaviour[2:3]){
title <- paste0(title,"-",nstates)
}
for(feature in features1){
title <- paste0(title,"-",feature)
}
if(length(sex) > 1){
title <- paste0(title,"_all")
} else {
title <- paste0(title,"_",sex)
}
title <- paste0(title,"_",end)
return(title)
}
file <- make_title(paste0(directory,"/params/"),
paste0(model,"-",
lamb,"-",
holdout_whale,"-",
rand_seed,"-",
"hmm.rds"))
if(file.exists(file)){
print(paste(file,"already exists. continuing..."))
next
}
# get data and remove heldout whale
source("../preprocessing/load_data.R")
Data
Data
args_list
args <- 1
# Set Model
model_ind <- (floor(args[1]) %% n_models) + 1
model <- models[[model_ind]][1]
lamb  <- as.numeric(models[[model_ind]][2])
# Select Holdout Whale
whale_ind <- (floor(args[1] / n_models) %% n_whales) + 1
holdout_whale <- whales[whale_ind]
# Select Seed
rand_seed <- (floor(args[1] / (n_models*n_whales)) %% n_retries) + 1
set.seed(rand_seed)
print(rand_seed)
print(holdout_whale)
print(model)
print(lamb)
# check if we already have a model
make_title <- function(start,end){
title <- paste0(start,statesPerBehaviour[1])
for(nstates in statesPerBehaviour[2:3]){
title <- paste0(title,"-",nstates)
}
for(feature in features1){
title <- paste0(title,"-",feature)
}
if(length(sex) > 1){
title <- paste0(title,"_all")
} else {
title <- paste0(title,"_",sex)
}
title <- paste0(title,"_",end)
return(title)
}
file <- make_title(paste0(directory,"/params/"),
paste0(model,"-",
lamb,"-",
holdout_whale,"-",
rand_seed,"-",
"hmm.rds"))
if(file.exists(file)){
print(paste(file,"already exists. continuing..."))
next
}
# get data and remove heldout whale
source("../preprocessing/load_data.R")
Data
Data$knownState
Data$knownState %in% 4
!(Data$knownState %in% 4)
sum(!(Data$knownState %in% 4))
# load data
Data <- data.frame(fread(data_file))
sum(!(Data$knownState %in% 4))
#.rs.restartR()
library(Rcpp)
library(tools)
compileAttributes("/Users/evsi8432/Documents/Research/momentuHMM")
package_native_routine_registration_skeleton("/Users/evsi8432/Documents/Research/momentuHMM")
install.packages("/Users/evsi8432/Documents/Research/momentuHMM",
repos=NULL,
type="source")
library(momentuHMM)
detach("package:momentuHMM", unload=TRUE)
library(momentuHMM)
library(dplyr)
library(mclust)
library(data.table)
library(RcppHungarian)
library(mvtnorm)
setwd("/Users/evsi8432/Documents/Research/PHMM/src/bash")
# get command-line arguments
args <- commandArgs(trailingOnly=TRUE)
args <- c("logMDDD_1-1-1_dd-30_2023-10-23.R",NA)
opt_file <- args[1]
args <- as.integer(args[2])
# get options
source(paste0('../opt/',opt_file))
# do the hierarchical thing
if(hier){
source("../HHMM/fit_model_PHHMM.R")
quit()
}
# define whales
whales <- c("none","A100a","A100b","A113a","A113b",
"D21a","D21b","D26a","D26b",
"I107a","I107b","I129","I145a","I145b",
"L87","L88","R48a","R48b","R58a","R58b")
n_whales <- length(whales)
# define models
source("../preprocessing/load_data.R")
ratio <- sum(!(Data$knownState %in% 4)) / nrow(Data)
ratio <- round(ratio,3)
models <- list()
models[[1]] <- c("no",     1.0)
models[[2]] <- c("random", 1.0)
models[[3]] <- c("fixed",  0.0)       # no weight
models[[4]] <- c("fixed",  0.5*ratio)
models[[5]] <- c("fixed",  ratio)     # equal weight
models[[6]] <- c("fixed",  0.5 + 0.5*ratio)
models[[7]] <- c("fixed",  1.0)       # natural weight
n_models <- length(models)
sind <- 0
if(is.na(args)){
args_list <- sind:(n_retries*n_whales*n_models-1)
} else {
args_list <- c(args)
}
args <- 0
# Set Model
model_ind <- (floor(args[1]) %% n_models) + 1
model <- models[[model_ind]][1]
lamb  <- as.numeric(models[[model_ind]][2])
# Select Holdout Whale
whale_ind <- (floor(args[1] / n_models) %% n_whales) + 1
holdout_whale <- whales[whale_ind]
# Select Seed
rand_seed <- (floor(args[1] / (n_models*n_whales)) %% n_retries) + 1
set.seed(rand_seed)
print(rand_seed)
print(holdout_whale)
print(model)
print(lamb)
# check if we already have a model
make_title <- function(start,end){
title <- paste0(start,statesPerBehaviour[1])
for(nstates in statesPerBehaviour[2:3]){
title <- paste0(title,"-",nstates)
}
for(feature in features1){
title <- paste0(title,"-",feature)
}
if(length(sex) > 1){
title <- paste0(title,"_all")
} else {
title <- paste0(title,"_",sex)
}
title <- paste0(title,"_",end)
return(title)
}
file <- make_title(paste0(directory,"/params/"),
paste0(model,"-",
lamb,"-",
holdout_whale,"-",
rand_seed,"-",
"hmm.rds"))
if(file.exists(file)){
print(paste(file,"already exists. continuing..."))
next
}
# get data and remove heldout whale
source("../preprocessing/load_data.R")
Data
sum(!(Data$knownState %in% 4))
length(Data)
nrow(Data)
unique(Data$ID)
106/2169
